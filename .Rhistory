bar(17)
bar(250)
bar(250000)
bar(0.1)
bar(10)
bar(100)
bar(1000)
bar(100000)
bar(10000000000)
attributes(bar)
attributes(rpois(10, 100))
eggs <- rpois(10, 100)
attributes(eggs)
str(eggs)
class(eggs)
bar
bar <- ecdf(rpois(100, 10))
bar
bar <- ecdf(rpois(100, 10))
bar
?rpois
x <- table(rpois(100, 5))
x
#>
#>  1  2  3  4  5  6  7  8  9 10
#>  7  5 18 14 15 15 14  4  5  3
x
class(x)
sloop::s3_class(x)
sloop::s3_methods_generic(x)
sloop::s3_methods_generic(ecdf)
sloop::s3_methods_generic("ecdf")
sloop::s3_methods_generic("print")
?new_tibble
foo
bar
green <- tibble::tribble(~x, ~y, c(1:10), 7)
green
green <- tibble::tribble(~x, ~y, 1:10, 7)
green
green <- tibble::tribble(~x, ~y, 1, 7, 9, 10)
green
attributes(green)
green$row.names
attributes(green)$row.names
?attributes
foo <- c(1,2)
class(foo) <- "test"
t.test(foo)
x <- structure(1:10, class = "test")
t(x)
x
t
t.test
sloop::s3_dispatch(t(x))
sloop::s3_dispatch(t.test(x))
sloop::s3_methods_class(table)
sloop::s3_methods_class(table(c(1,2,3)))
foo <- table(c(1,1,2))
foo
class(foo)
sloop::s3_methods_class(foo)
sloop::s3_methods_class(ecdf(rpois(100, 10)))
bar <- ecdf(rpois(100, 10))
sloop::s4_methods_class(bar)
class(bar)
sloop::s3_methods_class("ecdf")
sloop::s3_methods_class("table")
UseMethod
?UseMethod
retrieve_all_results.httr2_request <- function(x) {
}
?match.args
?match.arg
?bind_rows
resp
example("wiki_action_request")
document()
example("wiki_action_request")
?wiki_action_request
document()
?wiki_action_request
examples(wiki_action_request)
example("wiki_action_request")
request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:Australian_historians",
cmlimit = 10
)
request %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp <- httr2::resp_body_json(request)
resp <- request %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp
names(resp)
resp$batchcomplete
resp$continue
list(list(a = 1, b = 2), list(c = 3))
?list
?new_tibble
?attr
?new_tibble
?wiki_action_request()
request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:2026_events_in_Australia_by_month",
cmlimit = 10
) %>% httr2::req_perform() %>% httr2::resp_body_json()
request
?[[]]
?'[['
use_package("purrr")
?pluck
?new_tibble
c("a","b") in c("a","b","c")
c("a","b") %in% c("a","b","c")
all(c("a","b") %in% c("a","b","c"))
!all(c("a","b") %in% c("a","b","c"))
!all(c("a","b","c") %in% c("a","b"))
foo <- tibble::tribble(~x, ~y, 1,2,3,4)
as_wiki_tbl(foo)
load_all()
as_wiki_tbl(foo)
as_wiki_tbl(foo, request=NULL)
as_wiki_tbl(foo, request=NULL, continue=NULL)
as_wiki_tbl(foo, request=NULL, continue=NULL, batchcomplete=NULL)
bar <- as_wiki_tbl(foo, request=NULL, continue=NULL, batchcomplete=NULL)
attributes(bar)
tibble::is_tibble(bar)
req <- httr2::request("example.com")
req
httr2::req_url_parameters(req)
httr2::req_url_query(req, continue=NA)
httr2::req_url_query(req, continue="hello")
req <- httr2::req_url_query(req, continue="hello")
req
req <- httr2::req_url_query(req, continue=NULL)
req
?req_url_query
bar
attr(bar, "continue")
attr(bar, "continueh")
attr(bar, "continue")
is_wiki_tbl(bar)
is_valid_wiki_tbl(bar)
?new_tibble
bool(NA)
is.na(NA)
missing(NA)
is.missing(NA)
vctrs::new_data_frame
.External
vctrs::ffi_new_data_frame
?ffi_new_data_frame
resp
resp$batchcomplete
resp$continue
attr
?bind_rows
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
wiki_req_perform()
load_all()
wiki_req_perform
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
new_req <- httr2::req_url_query(!!!get_continue(resp))
?req_url_query
?rlang::list2
get_continue(resp)
list2(get_continue(resp))
rlang::list2(get_continue(resp))
rlang::list2(!!!get_continue(resp))
rlang::list2(!!!get_continue(resp)) -> foo
foo
new_req <- httr2::req_url_query(!!!foo)
rlang::ensym(get_continue(resp)[[1]])
quote(get_continue(resp)[[1]])
get_continue(resp)
new_req <- httr2::req_url_query(get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), !!!get_continue(resp))
new_req
set_batchcomplete(data, get_batchcomplete(new_data))
?expect_s3_class
?expect_no_error
?print
?methods("t")
load_all()
document()
methods("retrieve_all_results")
?expect_equal
?expect_gt
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
validate_wiki_tbl(resp)
attributes(resp)
"request" %in% attribytes(resp)
"request" %in% attributes(resp)
attributes(resp)
names(attributes(resp))
all(c("request", "continue", "batchcomplete") %in% names(attributes(x)))
all(c("request", "continue", "batchcomplete") %in% names(attributes(resp)))
test_active_file()
library(devtools)
test_active_file()
foo <- list(a = "b", b = "c")
foo
names(foo) <- NULL
foo
unname(foo)
test_active_file()
library(devtools)
load_all()
test()
use_r("wiki-tbl")
test_r("wiki-tbl")
use_test("wiki-tbl")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
httr2::request("example.com/?query=foo") %>% httr2::url_parse()
foo <- httr2::request("example.com/?query=foo")
foo
str(foo)
httr2::url_parse(foo$url)
bar <- httr2::url_parse(foo$url)
bar
str(bar)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
foo
class(foo)
foo$url
test_active_file()
?req_url_query
foo <- list(oldquerycontinue = 5, newquerycontinue = 10, continue = "blah")
foo
foo['continue' %in% names(foo)]
foo <- list(oldquerycontinue = 5, newquerycontinue = 10, continue = "blah", somethingelse = "hello")
foo['continue' %in% names(foo)]
sapply(names(foo), function(x) 'continue' %in% x)
foo[sapply(names(foo), function(x) 'continue' %in% x)]
grepl('continue', names(foo))
foo[grepl('continue', names(foo))]
foo[grepl('^continue', names(foo))]
foo[grepl('continue', names(foo))]
foo[!grepl('continue', names(foo))]
req_url_query
httr2::req_url_query
?modify_list
??modify_list
?check_requet
?check_request
httr2::check_reqest
httr2::check_request
test_active_file()
httr2::url_parse
test_active_file()
test_active_file()
library(devtools)
load_all()
test_active_file()
httr2::url_parse
test_active_file()
?httr2::url_parse
?httr2::url_parse
test_active_file()
test_active_file()
test_active_file()
use_r("set-continue-parameters")
use_test()
while(NULL) {print("hello!")}
httr2::request("example.com") %>% httr2::req_url_query(continue=NA)
httr2::request("example.com") %>% httr2::req_url_query(continue=NULL)
foo <- list(a = "g", b = "h")
foo
foo[[g]] <- NULl
foo[[g]] <- NULL
foo[["g"]] <- NULL
foo
foo[["a"]] <- NULL
foo
foo[[b]] <- NULL
foo
foo$b <- NULL
foo
rm(foo)
?list
foo <- vector("list", 100)
install.packages("lobstr")
lobstr::obj_size(foo)
foo
httr2::request("example.com") %>% httr2::req_url_query(continue="")
is.na("")
is.na(NA)
class("")
!is.na(NULL)
test2_req <- test_req <- httr2::request("example.com")
lobstr::test2_req
lobstr::obj_addr(test2_req)
lobstr::obj_addr(test_req)
test2_req <- httr2::req_url_query(continue = "hello")
test2_req <- httr2::req_url_query(test2_req, continue = "hello")
lobstr::obj_addr(test2_req)
lobstr::obj_addr(test_req)
test_req <- wiki_action_request() %>% generate_pages_by("categorymembers", cmtitle="Category:Physics") %>% httr2::req_url_query(continue="")
httr2::req_perform(test_req)
resp <- httr2::req_perform(test_req)
resp
httr2::resp_body_json(resp)
test_req <- wiki_action_request() %>% generate_pages_by("categorymembers", gcmtitle="Category:Physics") %>% httr2::req_url_query(continue="")
resp <- httr2::req_perform(test_req)
resp
resp_body_json(resp)
httr2::resp_body_json(resp)
?first
foo
purrr::detect_index(foo, !is.null)
purrr::detect_index(foo, function(x) !is.null(x))
foo[[1]] <- "hello"
purrr::detect_index(foo, function(x) !is.null(x))
lobstr::obj_addrs(foo)
lobstr::tree(foo)
lobstr::obj_addrs(foo)
foo <- vector("list", 10)
foo
lobstr::obj_addrs(foo)
lobstr::obj_addr(foo)
foo[[3]] <- "hello"
lobstr::obj_addr(foo)
lobstr::obj_addrs(foo)
c(list(2, 3, 4), list(4, 5, 6))
continue <- ""
request <- httr2::request("example.com")
httr2::req_url_query(request, !!!continue)
continue <- c("continue","")
httr2::req_url_query(request, !!!continue)
continue <- c(continue="")
httr2::req_url_query(request, !!!continue)
continue <- c(continue=NULL)
httr2::req_url_query(request, !!!continue)
is.na(continue)
is.na(continue)
test_active_file()
test_active_file()
foo
foo[[1]]
foo[[1]] <- "hello"
foo[[1]]
test_active_file()
test_active_file()
test_active_file()
foo <- list(1, 2, 3)
purrr::detect_index(foo, is.null)
test_active_file()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all(0)
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
library(devtools)
load_all()
document()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
?UseMethod
methods(retrieve_all)
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
document()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
document()
load_all()
document()
document()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_request_one()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_request_once()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_query_once()
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", ucuser="michaelgfalk") %>%
perform_query_once()
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", ucuser="michaelgfalk") %>%
httr2::req_perform()
reap
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
resp <- wiki_action_request() %>%
list_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
load_all()
resp <- wiki_action_request() %>%
get_list_of("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
test_active_file()
continue <- NA
length(continue) > 1
length(continue) == 1
is.na(list(a = 1))
?switch
?is.na
anyNA(NA)
anyNA(list(continue="||="))
all
all(grepl("continue", list(a = 1, b = 2)))
all(grepl("continue", list(continue = 1, gcmcontinue = 2)))
?grepl
all(grepl("continue", names(list(continue = 1, gcmcontinue = 2))))
all(names(list(1,2,3)))
names(list(1,2,3))
named
?unname
incomplete <- function(continue) {
!is.null(continue) && !anyNA(continue)
}
incomplete(TRUE)
incomplete(NULL)
incomplete(NA)
incomplete(list(continue="||=", gcmcontinue="hhghkd"))
is.list(NA)
is.list(NULL)
test_active_file()
test_active_file()
?retrieve_all
document()
?retrieve_all
document()
?retrieve_all
document9)
document()
?retrieve_all
test_coverage()
