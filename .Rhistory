load_all(0)
load_all()
document()
?get_list_type
resp <- wiki_action_request() %>%
get_list_type("categorymembers", cmsort="timestamp", cmdir="desc") %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp$query$categorymembers
load_all()
resp <- wiki_action_request() %>%
get_list_type("categorymembers", cmsort="timestamp", cmdir="desc") %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp$query$categorymembers
resp
document()
?get_list_type
resp <- wiki_action_request() %>%
get_list_type("categorymembers", cmsort="timestamp", cmdir="desc", cmtitle="Category:Physics") %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp$query$categorymembers
styler::style_pkg()
document()
load_all()
?get_list_of
use_r("wiki-request")
test_r()
use_test()
?expect_named
test()
test()
test()
test()
test()
resp <- wiki_action_request() %>%
get_list_of("usercontribs", ucuser="Michaelgfalk") %>%
httr2::req_perform()
resp
test()
load_all()
test()
run_examples()
run_examples()
load_all()
run_examples()
check()
check()
?get_generator_of
?get_list_of
check()
check()
document()
load_all()
document()
check()
get_generator_of
load_all()
check()
check()
load_all()
document()
run_examples
run_examples()
document()
run_examples()
load_all()
?generate_pages_by
run_examples()
document()
run_examples()
generate_pages_by()
generate_pages_by
wiki_action_request
document()
run_examples()
document()
run_examples()
document()
run_examples()
check()
use_r("perform_request")
use_test()
?is_tibble
?expect_type
foo <- tibble::tribble(~x, ~y, c(1,2,3), 7)
foo
typeof(foo)
class(foo)
testthat::expect_s3_class(foo, "tbl_df")
?expect_s3_class
testthat::expect_s3_class(foo, "tbl_dg")
testthat::expect_s3_class(foo, "tbl_df")
testthat::expect_s3_class(foo, "tbl")
foo
attributes(foo)
install.packages("sloop")
sloop::otype(foo)
use_r("wiki-tbl")
use_test()
?httr2::req_perform
rename_files("perform_request", "perform-request")
use_r("perform-request")
use_test()
switch("x", x = , y = 2, z = 3)
?switch
ifelse(TRUE, 1, "no")
ifelse(FALSE, 1, "no")
ifelse(NA, 1, "no")
foo <- wiki_action_request() %>% generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>% httr2::req_perform() %>% httr2::req_body_json()
foo <- wiki_action_request() %>% generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>% httr2::req_perform() %>% httr2::resp_body_json()
foo
?req_body_json
foo <- wiki_action_request() %>% generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>% httr2::req_perform() %>% httr2::resp_body_json()
foo
foo$query
foo$query$pages
tribble(foo$query$pages)
tibble::tribble(foo$query$pages)
?tibble
names(pages[[1]])
names(foo$query$pages[[1]])
?stack
stack(foo$query$pages)
?bind_rows
bind_rows(!!!foo$query$pages)
dplyr::bind_rows(!!!foo$query$pages)
dplyr::bind_rows
?rbind
rbind(foo$query$pages)
?lapply
lapply(foo, data.frame) %>% rbind()
lapply(foo$query$pages, data.frame) %>% rbind()
lapply(foo$query$pages, data.frame)
?rbind
sapply(foo$query$pages, data.frame) %>% rbind()
sapply(foo$query$pages, data.frame)
sapply(foo$query$pages, data.frame)[0]
sapply(foo$query$pages, data.frame)[1]
sapply(foo$query$pages, data.frame)[2]
sapply(foo$query$pages, data.frame)[2,]
sapply(foo$query$pages, data.frame) %>% cbind()
data.frame()
?data.frame
use_tidy_dependencies
use_package("tibble")
?apply
lapply(foo, data.frame)
lapply(foo$query$pages, data.frame)
lapply(foo$query$pages, data.frame) %>% rbind()
?rbind
bar <- lapply(foo$query$pages, data.frame)
do.call(cbind, bar)
bar
bar[[1]]
all_cols <- names(foo$query$pages[[1]])
all_cols
lapply(all_cols, function(x) sapply(foo$query$pages, `[[`, x))
do.call(cbind, foo$query$pages)
do.call(cbind, foo$query$pages)[,10]
do.call(rbind, foo$query$pages)
do.call(rbind, foo$query$pages) %>% tibble::tibble()
do.call(rbind, foo$query$pages) -> bar
bar
typeof(bar)
str(bar)
as_tibble(bar)
tibble::as_tibble(bar)
?do.call
?rbind
do.call(rbind, foo$query$pages, stringsAsFactors=F) -> bar
do.call
?do.call
use_package("purrr")
library(devtools)
install.packages("devtools")
install.packages("tidyverse")
use_package("purrr")
library(devtools)
use_package("purrr")
load_all()
load_all()
document()
?wiki_action_request
example("wiki_action_request")
example(wiki_action_request)
request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:Australian_historians",
cmlimit = 10
)
request
foo <- request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:Australian_historians",
cmlimit = 10
)
foo
foo <- request %>%
httr2::req_perform() %>%
httr2::resp_body_json() %>%
.$query %>%
.$categorymembers
foo
foo <- request %>%
httr2::req_perform() %>%
httr2::resp_body_json()
foo
map(foo, tibble)
purrr::map(foo, tibble::tibble)
purrr::map(foo$query$categorymembers, tibble::tibble)
purrr::map(foo$query$categorymembers, tibble::as_tibble)
dplyr::bind_rows(foo$query)
?use_package
use_package("dplyr")
?bind_rows
foo <- list(a=1, b=2)
"c" %in% foo
"a" %in% foo
"a" %in% names(foo)
"c" %in% names(foo)
request
str(request)
httr2::url_parse(request$url)
httr2::url_parse(request$url)$action
httr2::url_parse(request$url)$query$action
?abort
?bind_rows
foo$query
foo
request
resp
foo <- httr2::req_perform(request) %>% resp_body_json()
foo <- httr2::req_perform(request) %>% httr2::resp_body_json()
foo
foo$query$someother <- list(pageid=10, title="foobar")
dplyr::bind_rows(foo$query)
x <- numeric()
out <- vector("list", length(x))
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
out
x
length(x)
1:0
out[0]
x[0]
document()
load_all()
eggs <- list(a=1)
if (eggs[["b"]]) {print("look at this!")}
if (with(eggs, exists("b"))) {print("look at this!")}
if (with(eggs, exists("a"))) {print("look at this!")}
?t.test()
?t.data.frame()
?data.frame
install.packages("sloop")
sloop::is_s3_generic(data.frame)
sloop::is_s3_generic("data.frame")
sloop::is_s3_generic("t")
?as.data.frame.data.frame
ecdf(rpois(100, 0))
bar <- ecdf(rpois(100, 0))
bar
class(bar)
?ecdf
bar(7)
bar(17)
bar(250)
bar(250000)
bar(0.1)
bar(10)
bar(100)
bar(1000)
bar(100000)
bar(10000000000)
attributes(bar)
attributes(rpois(10, 100))
eggs <- rpois(10, 100)
attributes(eggs)
str(eggs)
class(eggs)
bar
bar <- ecdf(rpois(100, 10))
bar
bar <- ecdf(rpois(100, 10))
bar
?rpois
x <- table(rpois(100, 5))
x
#>
#>  1  2  3  4  5  6  7  8  9 10
#>  7  5 18 14 15 15 14  4  5  3
x
class(x)
sloop::s3_class(x)
sloop::s3_methods_generic(x)
sloop::s3_methods_generic(ecdf)
sloop::s3_methods_generic("ecdf")
sloop::s3_methods_generic("print")
?new_tibble
foo
bar
green <- tibble::tribble(~x, ~y, c(1:10), 7)
green
green <- tibble::tribble(~x, ~y, 1:10, 7)
green
green <- tibble::tribble(~x, ~y, 1, 7, 9, 10)
green
attributes(green)
green$row.names
attributes(green)$row.names
?attributes
foo <- c(1,2)
class(foo) <- "test"
t.test(foo)
x <- structure(1:10, class = "test")
t(x)
x
t
t.test
sloop::s3_dispatch(t(x))
sloop::s3_dispatch(t.test(x))
sloop::s3_methods_class(table)
sloop::s3_methods_class(table(c(1,2,3)))
foo <- table(c(1,1,2))
foo
class(foo)
sloop::s3_methods_class(foo)
sloop::s3_methods_class(ecdf(rpois(100, 10)))
bar <- ecdf(rpois(100, 10))
sloop::s4_methods_class(bar)
class(bar)
sloop::s3_methods_class("ecdf")
sloop::s3_methods_class("table")
UseMethod
?UseMethod
retrieve_all_results.httr2_request <- function(x) {
}
?match.args
?match.arg
?bind_rows
resp
example("wiki_action_request")
document()
example("wiki_action_request")
?wiki_action_request
document()
?wiki_action_request
examples(wiki_action_request)
example("wiki_action_request")
request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:Australian_historians",
cmlimit = 10
)
request %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp <- httr2::resp_body_json(request)
resp <- request %>%
httr2::req_perform() %>%
httr2::resp_body_json()
resp
names(resp)
resp$batchcomplete
resp$continue
list(list(a = 1, b = 2), list(c = 3))
?list
?new_tibble
?attr
?new_tibble
?wiki_action_request()
request <- wiki_action_request(
list = "categorymembers",
cmtitle = "Category:2026_events_in_Australia_by_month",
cmlimit = 10
) %>% httr2::req_perform() %>% httr2::resp_body_json()
request
?[[]]
?'[['
use_package("purrr")
?pluck
?new_tibble
c("a","b") in c("a","b","c")
c("a","b") %in% c("a","b","c")
all(c("a","b") %in% c("a","b","c"))
!all(c("a","b") %in% c("a","b","c"))
!all(c("a","b","c") %in% c("a","b"))
foo <- tibble::tribble(~x, ~y, 1,2,3,4)
as_wiki_tbl(foo)
load_all()
as_wiki_tbl(foo)
as_wiki_tbl(foo, request=NULL)
as_wiki_tbl(foo, request=NULL, continue=NULL)
as_wiki_tbl(foo, request=NULL, continue=NULL, batchcomplete=NULL)
bar <- as_wiki_tbl(foo, request=NULL, continue=NULL, batchcomplete=NULL)
attributes(bar)
tibble::is_tibble(bar)
req <- httr2::request("example.com")
req
httr2::req_url_parameters(req)
httr2::req_url_query(req, continue=NA)
httr2::req_url_query(req, continue="hello")
req <- httr2::req_url_query(req, continue="hello")
req
req <- httr2::req_url_query(req, continue=NULL)
req
?req_url_query
bar
attr(bar, "continue")
attr(bar, "continueh")
attr(bar, "continue")
is_wiki_tbl(bar)
is_valid_wiki_tbl(bar)
?new_tibble
bool(NA)
is.na(NA)
missing(NA)
is.missing(NA)
vctrs::new_data_frame
.External
vctrs::ffi_new_data_frame
?ffi_new_data_frame
resp
resp$batchcomplete
resp$continue
attr
?bind_rows
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
wiki_req_perform()
load_all()
wiki_req_perform
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
new_req <- httr2::req_url_query(!!!get_continue(resp))
?req_url_query
?rlang::list2
get_continue(resp)
list2(get_continue(resp))
rlang::list2(get_continue(resp))
rlang::list2(!!!get_continue(resp))
rlang::list2(!!!get_continue(resp)) -> foo
foo
new_req <- httr2::req_url_query(!!!foo)
rlang::ensym(get_continue(resp)[[1]])
quote(get_continue(resp)[[1]])
get_continue(resp)
new_req <- httr2::req_url_query(get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), !!!get_continue(resp))
new_req
set_batchcomplete(data, get_batchcomplete(new_data))
?expect_s3_class
?expect_no_error
?print
?methods("t")
load_all()
document()
methods("retrieve_all_results")
?expect_equal
?expect_gt
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
validate_wiki_tbl(resp)
attributes(resp)
"request" %in% attribytes(resp)
"request" %in% attributes(resp)
attributes(resp)
names(attributes(resp))
all(c("request", "continue", "batchcomplete") %in% names(attributes(x)))
all(c("request", "continue", "batchcomplete") %in% names(attributes(resp)))
test_active_file()
library(devtools)
test_active_file()
foo <- list(a = "b", b = "c")
foo
names(foo) <- NULL
foo
unname(foo)
test_active_file()
