wiki_req_perform
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("gcategorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
attributes(resp)
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
new_req <- httr2::req_url_query(!!!get_continue(resp))
?req_url_query
?rlang::list2
get_continue(resp)
list2(get_continue(resp))
rlang::list2(get_continue(resp))
rlang::list2(!!!get_continue(resp))
rlang::list2(!!!get_continue(resp)) -> foo
foo
new_req <- httr2::req_url_query(!!!foo)
rlang::ensym(get_continue(resp)[[1]])
quote(get_continue(resp)[[1]])
get_continue(resp)
new_req <- httr2::req_url_query(get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), get_continue(resp))
new_req <- httr2::req_url_query(get_request(resp), !!!get_continue(resp))
new_req
set_batchcomplete(data, get_batchcomplete(new_data))
?expect_s3_class
?expect_no_error
?print
?methods("t")
load_all()
document()
methods("retrieve_all_results")
?expect_equal
?expect_gt
test_active_file()
load_all()
test_active_file()
test_active_file()
test_active_file()
resp <- wiki_action_request() %>%
generate_pages_by("categorymembers", gcmtitle = "Category:Physics") %>%
perform_query_once()
resp
attributes(resp)
validate_wiki_tbl(resp)
attributes(resp)
"request" %in% attribytes(resp)
"request" %in% attributes(resp)
attributes(resp)
names(attributes(resp))
all(c("request", "continue", "batchcomplete") %in% names(attributes(x)))
all(c("request", "continue", "batchcomplete") %in% names(attributes(resp)))
test_active_file()
library(devtools)
test_active_file()
foo <- list(a = "b", b = "c")
foo
names(foo) <- NULL
foo
unname(foo)
test_active_file()
library(devtools)
load_all()
test()
use_r("wiki-tbl")
test_r("wiki-tbl")
use_test("wiki-tbl")
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
test_active_file()
httr2::request("example.com/?query=foo") %>% httr2::url_parse()
foo <- httr2::request("example.com/?query=foo")
foo
str(foo)
httr2::url_parse(foo$url)
bar <- httr2::url_parse(foo$url)
bar
str(bar)
test_active_file()
test_active_file()
test_active_file()
test_active_file()
foo
class(foo)
foo$url
test_active_file()
?req_url_query
foo <- list(oldquerycontinue = 5, newquerycontinue = 10, continue = "blah")
foo
foo['continue' %in% names(foo)]
foo <- list(oldquerycontinue = 5, newquerycontinue = 10, continue = "blah", somethingelse = "hello")
foo['continue' %in% names(foo)]
sapply(names(foo), function(x) 'continue' %in% x)
foo[sapply(names(foo), function(x) 'continue' %in% x)]
grepl('continue', names(foo))
foo[grepl('continue', names(foo))]
foo[grepl('^continue', names(foo))]
foo[grepl('continue', names(foo))]
foo[!grepl('continue', names(foo))]
req_url_query
httr2::req_url_query
?modify_list
??modify_list
?check_requet
?check_request
httr2::check_reqest
httr2::check_request
test_active_file()
httr2::url_parse
test_active_file()
test_active_file()
library(devtools)
load_all()
test_active_file()
httr2::url_parse
test_active_file()
?httr2::url_parse
?httr2::url_parse
test_active_file()
test_active_file()
test_active_file()
use_r("set-continue-parameters")
use_test()
while(NULL) {print("hello!")}
httr2::request("example.com") %>% httr2::req_url_query(continue=NA)
httr2::request("example.com") %>% httr2::req_url_query(continue=NULL)
foo <- list(a = "g", b = "h")
foo
foo[[g]] <- NULl
foo[[g]] <- NULL
foo[["g"]] <- NULL
foo
foo[["a"]] <- NULL
foo
foo[[b]] <- NULL
foo
foo$b <- NULL
foo
rm(foo)
?list
foo <- vector("list", 100)
install.packages("lobstr")
lobstr::obj_size(foo)
foo
httr2::request("example.com") %>% httr2::req_url_query(continue="")
is.na("")
is.na(NA)
class("")
!is.na(NULL)
test2_req <- test_req <- httr2::request("example.com")
lobstr::test2_req
lobstr::obj_addr(test2_req)
lobstr::obj_addr(test_req)
test2_req <- httr2::req_url_query(continue = "hello")
test2_req <- httr2::req_url_query(test2_req, continue = "hello")
lobstr::obj_addr(test2_req)
lobstr::obj_addr(test_req)
test_req <- wiki_action_request() %>% generate_pages_by("categorymembers", cmtitle="Category:Physics") %>% httr2::req_url_query(continue="")
httr2::req_perform(test_req)
resp <- httr2::req_perform(test_req)
resp
httr2::resp_body_json(resp)
test_req <- wiki_action_request() %>% generate_pages_by("categorymembers", gcmtitle="Category:Physics") %>% httr2::req_url_query(continue="")
resp <- httr2::req_perform(test_req)
resp
resp_body_json(resp)
httr2::resp_body_json(resp)
?first
foo
purrr::detect_index(foo, !is.null)
purrr::detect_index(foo, function(x) !is.null(x))
foo[[1]] <- "hello"
purrr::detect_index(foo, function(x) !is.null(x))
lobstr::obj_addrs(foo)
lobstr::tree(foo)
lobstr::obj_addrs(foo)
foo <- vector("list", 10)
foo
lobstr::obj_addrs(foo)
lobstr::obj_addr(foo)
foo[[3]] <- "hello"
lobstr::obj_addr(foo)
lobstr::obj_addrs(foo)
c(list(2, 3, 4), list(4, 5, 6))
continue <- ""
request <- httr2::request("example.com")
httr2::req_url_query(request, !!!continue)
continue <- c("continue","")
httr2::req_url_query(request, !!!continue)
continue <- c(continue="")
httr2::req_url_query(request, !!!continue)
continue <- c(continue=NULL)
httr2::req_url_query(request, !!!continue)
is.na(continue)
is.na(continue)
test_active_file()
test_active_file()
foo
foo[[1]]
foo[[1]] <- "hello"
foo[[1]]
test_active_file()
test_active_file()
test_active_file()
foo <- list(1, 2, 3)
purrr::detect_index(foo, is.null)
test_active_file()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all(0)
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
library(devtools)
load_all()
document()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
?UseMethod
methods(retrieve_all)
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
document()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
document()
load_all()
document()
document()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
retrieve_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_request_one()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_request_once()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
perform_query_once()
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", ucuser="michaelgfalk") %>%
perform_query_once()
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", ucuser="michaelgfalk") %>%
httr2::req_perform()
reap
resp
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
load_all()
resp <- wiki_action_request() %>%
generate_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
resp <- wiki_action_request() %>%
list_pages_by("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
load_all()
resp <- wiki_action_request() %>%
get_list_of("usercontribs", gucuser="michaelgfalk") %>%
httr2::req_perform()
resp
test_active_file()
continue <- NA
length(continue) > 1
length(continue) == 1
is.na(list(a = 1))
?switch
?is.na
anyNA(NA)
anyNA(list(continue="||="))
all
all(grepl("continue", list(a = 1, b = 2)))
all(grepl("continue", list(continue = 1, gcmcontinue = 2)))
?grepl
all(grepl("continue", names(list(continue = 1, gcmcontinue = 2))))
all(names(list(1,2,3)))
names(list(1,2,3))
named
?unname
incomplete <- function(continue) {
!is.null(continue) && !anyNA(continue)
}
incomplete(TRUE)
incomplete(NULL)
incomplete(NA)
incomplete(list(continue="||=", gcmcontinue="hhghkd"))
is.list(NA)
is.list(NULL)
test_active_file()
test_active_file()
?retrieve_all
document()
?retrieve_all
document()
?retrieve_all
document9)
document()
?retrieve_all
test_coverage()
library(devtools)
check()
?`attr<-`
T
TRUE
TR
document()
document()
document()
check()
check()
test_coverage()
use_test()
library(devtools)
?expect_error
?is_tibble
data.frame(a=1:5, b=1:2)
data.frame(a=1:5, b=1:5)
tibble::is_tibble(data.frame(a=1:5, b=1:5))
tibble::is_tibble(list(a=1:5, b=1:5))
tibble::is_tibble
test_active_file()
test_active_file()
test_active_file()
test_coverage()
document()
install()
?package_version
?devtools
use_version()
install()
use_r("get_page_properties")
use_test()
test(0)
test()
usethis::rename_files("get_page_properties", "get-page-properties")
use_r("get-page-properties")
nand
?purrr::map
?match.call
?call_args
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::fn_fmls()
}
foo <- get_page_properties(pageid = 1:3)
foo
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::call_args()
}
foo
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
pageid
args <- rlang::fn_fmls()
}
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
pageid
args <- rlang::fn_fmls()
}
foo
foo <- get_page_properties(pageid = 1:3)
foo
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::call_args()
}
foo <- get_page_properties(pageid = 1:3, properties=c("hello"))
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::fn_fmls_names()
}
foo <- get_page_properties(pageid = 1:3, properties=c("hello"))
foo
args <- rlang::fn_fmls()
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::fn_fmls()
}
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::call_args()
}
foo <- get_page_properties(pageid = 1:3)
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- environment()
}
foo <- get_page_properties(pageid = 1:3)
foo
foo$pageid
foo$title
list(foo)
list2(fo)
get_page_properties <- function(pageid = NULL, title = NULL, properties) {
if (!xor(is.null(pageid), is.null(title))) {
stop("You must provide (only) one of `pageid` or `title`.")
}
args <- rlang::env_get_list()
}
foo <- get_page_properties(pageid = 1:3)
?env_get_list
?rlang::arg_match
one_page_properties(id, id_type, properties) {
one_page_properties(id, id_type, properties) {
one_page_properties <- function(id, id_type, properties) {
id_type <- rlang::ensym(glue::glue("{id_type}s"))
wiki_action_request() %>%
query_page_properties(properties, !!id_type := id)
}
one_page_properties(1, "pageid", c("categories"))
one_page_properties <- function(id, id_type, properties) {
id_type <- rlang::enquo(glue::glue("{id_type}s"))
wiki_action_request() %>%
query_page_properties(properties, !!id_type := id)
}
one_page_properties(1, "pageid", c("categories"))
rlang::last_error()
.set_action
one_page_properties <- function(id, id_type, properties) {
id_type <- rlang::ensym(id_type)
wiki_action_request() %>%
query_page_properties(properties, !!id_type := id)
}
one_page_properties(1, "pageid", c("categories"))
?rlang::arg_match
?map
get_page_properties <- function(.x, by=c("pageid","title","revid"), properties) {
rlang::arg_match(by)
by <- paste0(by, "s")
purrr::map(.x, \(x) one_page_properties(x, by, properties))
}
foo <- get_page_properties(1:5, "title", c("revisions|categories"))
foo[[1]]
get_page_properties <- function(.x, by=c("pageid","title","revid"), properties) {
rlang::arg_match(by)
by <- paste0(by, "s")
purrr::map(.x, \(x) one_page_properties(x, !!by, properties))
}
foo[[1]]
foo <- get_page_properties(1:5, "title", c("revisions|categories"))
foo[[1]]
?wiki_action_request
document()
?mutate
?query_page_properties
