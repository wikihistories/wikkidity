[{"path":"https://wikihistories.github.io/wikkitidy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 wikkitidy authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Falk. Author, maintainer.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falk M (2023). wikkitidy: Tidy analysis Wikipedia R. R package version 0.1.0.9002, https://wikihistories.github.io/wikkitidy/.","code":"@Manual{,   title = {wikkitidy: Tidy analysis of Wikipedia in R},   author = {Michael Falk},   year = {2023},   note = {R package version 0.1.0.9002},   url = {https://wikihistories.github.io/wikkitidy/}, }"},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"wikkitidy","dir":"","previous_headings":"","what":"Tidy analysis of Wikipedia in R ","title":"Tidy analysis of Wikipedia in R ","text":"Tidy analysis Wikipedia R","code":""},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":"Tidy analysis of Wikipedia in R ","text":"wiki: many wikis, one dominates Wikiverse. Wikipedia largest repository facts ever assembled human hands. Scholars world turning Wikipedia understand twenty-first century society understands . quiddity: ‘whatness’ thing. kind thing . Wikipedia? merely another encyclopaedia? news presented history? consensus global village, battleground ideological war? tidy: best kind data. R programmers lucky access tidyverse, collection packages make easy analyse, visualise publish data. package embodies tidy data principles returning results Wikipedia’s APIs tibbles simple vectors, providing number vectorised analysis functions can applied reliably without fuss data retrieve. Thus wikkitidy’s aim: help work Wikipedia minimal data wrangling cleaning.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy analysis of Wikipedia in R ","text":"can install development version wikkitidy GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"wikihistories/wikkitidy\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner loop of retrieve_all — continue_query","title":"Inner loop of retrieve_all — continue_query","text":"function drives retrieve_all, repeatedly appending continue parameters returned MediaWiki Action API request retrieving next batch.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner loop of retrieve_all — continue_query","text":"","code":"continue_query(.req, data = NULL, continue = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner loop of retrieve_all — continue_query","text":".req httr2_request object describing API query data Data returned previous iteration query, continue Continue parameter returned previous iteration query, ","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner loop of retrieve_all — continue_query","text":"wiki_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a REST request — core_rest_request","title":"Build a REST request — core_rest_request","text":"core_request_request() builds request MediaWiki Core REST API basic REST API available MediaWiki wikis. wikimedia_rest_request() builds request Wikimedia REST API additional endpoint just Wikipedia wikis managed Wikimedia Foundation","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a REST request — core_rest_request","text":"","code":"core_rest_request(..., language = \"en\")  wikimedia_rest_request(..., language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a REST request — core_rest_request","text":"... <dynamic-dots> Components add URL. passed httr2::req_url_path_append. pass named arguments, names dropped. language two-letter language code Wikipedia edition","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a REST request — core_rest_request","text":"core_rest_request, S3 vector subclasses httr2_request (see httr2::request)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a REST request — core_rest_request","text":"","code":"# Get the html of the 'Earth' article on English Wikipedia response <- core_rest_request(\"page\", \"Earth\", \"html\") %>%   httr2::req_perform()  response <- wikimedia_rest_request(\"page\", \"html\", \"Earth\") %>%   httr2::req_perform() #> Error in wikimedia_rest_request(\"page\", \"html\", \"Earth\"): could not find function \"wikimedia_rest_request\""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"two revisions Wikipedia page can compared using 'diff' tool. tool compares '' revision '' revision, looking insertions, deletions relocations text. operation can performed order, across span revisions.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"get_diff(from, to, language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"Vector revision ids Vector revision ids language Vector two-letter language codes (recyled length==1)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"list length , comprising wikidiff2 responses, represented R lists","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"# Compare revision 847170467 to 851733941 on English Wikipedia diffs <- get_diff(847170467, 851733941)  # Each wikidiff2 response contains three main keys: names(diffs[[1]]) #> [1] \"from\" \"to\"   \"diff\" # [1] \"from\" \"to\" \"diff\"  # To see the text that has been inserted, deleted, or moved, look in the # `diff` key, which contains a numbered list of differences diffs[[1]]$diff[[2]]$text #> [1] \"Though ''Neuranethes spodopterodes'' is invasive in the regions where it has emerged as a pest, it is not an exotic invader, but a [[Species translocation|translocated species]], having been imported inadvertently from its natural range in more northerly regions of the country. In its original range the moth is not of horticultural importance, being controlled by natural enemies that as yet have neither been identified nor imported along with the host plants. In contrast the ''Agapanthus'' borer is of considerable concern in the South West, and its voracity is so impressive that the species shows promise as a possible control for invasive ''Agapanthus praecox'' in countries like New Zealand.<ref>M.D. Picker and M. Krüger. Spread and Impacts of the Agapanthus Borer (Neuranethes spodopterodes (Hampson, 1908), comb. nov.), a Translocated Native Moth Species (Lepidoptera: Noctuidae). African Entomology 2013 21 (1), 172-176<\/ref>\"  # In this case, the diff is of type `0`, which means an insertion diffs[[1]]$diff[[2]]$type #> [1] 0  # The function is vectorised, so you can compare multiple pairs of revisions # in a single call # See diffs for the last five revisions of the Main Page revisions <- wiki_action_request() %>%   query_page_properties(     \"revisions\",     titles = \"Main_Page\", rvlimit = 5, rvprop = \"ids\", rvdir = \"older\"   ) %>%   perform_query_once() %>%   tidyr::hoist(revisions, \"parentid\", \"revid\") diffs <- get_diff(from = revisions$parentid, to = revisions$revid)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_langlinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out which other-language wikis have linked pages — get_langlinks","title":"Find out which other-language wikis have linked pages — get_langlinks","text":"function fails find interwiki links passed title, fail silently.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_langlinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out which other-language wikis have linked pages — get_langlinks","text":"","code":"get_langlinks(titles, language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_langlinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out which other-language wikis have linked pages — get_langlinks","text":"titles character vector page titles language character vector two-letter language codes. length 1, recycled.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_langlinks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out which other-language wikis have linked pages — get_langlinks","text":"list page_language_object vectors.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_langlinks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out which other-language wikis have linked pages — get_langlinks","text":"","code":"# Get language links for a single page on English Wikipedia get_langlinks(\"Charles_Harpur\") #> [[1]] #> <page_language_object[2]> #> [1] de:Charles Harpur fr:Charles Harpur #>   # Get a tbl of pages from French Wikipedia using the Action API, then # find their interwiki links albums_des_beatles <- wiki_action_request(language = \"fr\") %>%   query_generate_pages(     \"categorymembers\",     gcmtitle = \"Catégorie:Album_des_Beatles\",     gcmtype = \"page\"     ) %>%   query_page_properties(\"title\") %>%   retrieve_all() %>%   dplyr::mutate(links = get_langlinks(title, language = \"fr\")) albums_des_beatles #> <wiki_tbl> #> Request URL: #> https://fr.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&generator=categorymembers&gcmtitle=Cat%C3%A9gorie%3AAlbum_des_Beatles&gcmtype=page&prop=title #> ✔ All results downloaded from server #> ✔ Data complete for all records #> # A tibble: 30 × 4 #>      pageid    ns title                                             links     #>       <int> <int> <chr>                                             <list>    #>  1   314256     0 The Beatles (album)                               <lng_lnk> #>  2   466773     0 Abbey Road (album)                                <lng_lnk> #>  3   639219     0 A Hard Day's Night (album)                        <lng_lnk> #>  4   639231     0 Beatles for Sale                                  <lng_lnk> #>  5  3776338     0 Beatles '65                                       <lng_lnk> #>  6  4899948     0 The Beatles at the Hollywood Bowl                 <lng_lnk> #>  7  9342535     0 The Beatles' Long Tall Sally                      <lng_lnk> #>  8 11105806     0 Pochette de Sgt. Pepper's Lonely Hearts Club Band <lng_lnk> #>  9 13345678     0 The Beatles' First !                              <lng_lnk> #> 10 14065386     0 Les Beatles (album français)                      <lng_lnk> #> # ℹ 20 more rows  # Sort pages by number of links albums_des_beatles %>%   dplyr::mutate(count = purrr::map(links, length)) %>%   dplyr::arrange(links, desc = TRUE) #> <wiki_tbl> #> Request URL: #> https://fr.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&generator=categorymembers&gcmtitle=Cat%C3%A9gorie%3AAlbum_des_Beatles&gcmtype=page&prop=title #> ✔ All results downloaded from server #> ✔ Data complete for all records #> # A tibble: 30 × 5 #>      pageid    ns title                                          links     count #>       <int> <int> <chr>                                          <list>    <lis> #>  1   314256     0 The Beatles (album)                            <lng_lnk> <int> #>  2   466773     0 Abbey Road (album)                             <lng_lnk> <int> #>  3   639219     0 A Hard Day's Night (album)                     <lng_lnk> <int> #>  4   639231     0 Beatles for Sale                               <lng_lnk> <int> #>  5  3776338     0 Beatles '65                                    <lng_lnk> <int> #>  6  4899948     0 The Beatles at the Hollywood Bowl              <lng_lnk> <int> #>  7  9342535     0 The Beatles' Long Tall Sally                   <lng_lnk> <int> #>  8 11105806     0 Pochette de Sgt. Pepper's Lonely Hearts Club … <lng_lnk> <int> #>  9 13345678     0 The Beatles' First !                           <lng_lnk> <int> #> 10 14065386     0 Les Beatles (album français)                   <lng_lnk> <int> #> # ℹ 20 more rows"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out more about a page or vector of pages — get_page_properties","title":"Find out more about a page or vector of pages — get_page_properties","text":"function make one API call per page. Beware requesting data many pages!","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out more about a page or vector of pages — get_page_properties","text":"","code":"get_page_properties(.x, by = c(\"pageid\", \"title\", \"revid\"), properties, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out more about a page or vector of pages — get_page_properties","text":".x vector pageids, titles revisionids type information contained .x properties desired properties; can either string delimited \"|\" character vector ... Name-value pairs additional parameters particular properties requested","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out more about a page or vector of pages — get_page_properties","text":"list length .x, containing returned properties.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out more about a page or vector of pages — get_page_properties","text":"","code":"# List all members of a category, then retrieve page information page_ids <- wiki_action_request() %>% query_list_of(\"categorymembers\", cmtitle=\"Category:ATP_Cup\") %>%   retrieve_all() page_info <- get_page_properties(page_ids$pageid, by=\"pageid\", \"info\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"function intended developer use. makes easy quickly generate vectorised calls different API endpoints.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"","code":"get_rest_resource(   ...,   language = \"en\",   endpoint = c(\"core\", \"wikimedia\"),   response_type = c(\"json\", \"html\") )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"... <dynamic-dots> URL components desired resources. Names arguments ignored. function follows tidyverse vector recycling rules, vectors must length length one. language Character vector two-letter language codes endpoint desired REST endpoint, either \"core\" \"wikimedia\" response_type expected Content-Type response. Currently \"html\" \"json\" supported.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"list responses. response_type == \"json\", responses simple R lists. response_type == \"html\", responses xml_document objects.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/history_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector of history count objects returned from the Core REST API — history_count","title":"Vector of history count objects returned from the Core REST API — history_count","text":"Vector history count objects returned Core REST API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/history_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector of history count objects returned from the Core REST API — history_count","text":"","code":"history_count(value, limit, type, request)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/history_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector of history count objects returned from the Core REST API — history_count","text":"value Integer vector history counts limit Boolean vector indicating whether count upper limit type Type edits requested request httr2_request used retrieve counts","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/history_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector of history count objects returned from the Core REST API — history_count","text":"integer vector history counts, handles","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_language_object.html","id":null,"dir":"Reference","previous_headings":"","what":"A page language object as returned from the Core REST API — page_language_object","title":"A page language object as returned from the Core REST API — page_language_object","text":"page language object returned Core REST API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_language_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A page language object as returned from the Core REST API — page_language_object","text":"","code":"page_language_object(code, name, key, title)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_language_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A page language object as returned from the Core REST API — page_language_object","text":"code Two-letter language code name name language key URL-friendly title page title human-readable title page","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_language_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A page language object as returned from the Core REST API — page_language_object","text":"vector page_language_objects.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_language_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A page language object as returned from the Core REST API — page_language_object","text":"","code":"# This is the return type of [get_langlinks]: austen <- get_langlinks(\"Jane Austen\") class(austen) #> [1] \"list\""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_object.html","id":null,"dir":"Reference","previous_headings":"","what":"A page object returned from the Core REST API — page_object","title":"A page object returned from the Core REST API — page_object","text":"page object returned Core REST API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A page object returned from the Core REST API — page_object","text":"","code":"page_object(x)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A page object returned from the Core REST API — page_object","text":"x List page objects JSON format REST API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A page object returned from the Core REST API — page_object","text":"page object vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":null,"dir":"Reference","previous_headings":"","what":"Get first batch of results for a MediaWiki Action API request — perform_query_once","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"Get first batch results MediaWiki Action API request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"","code":"perform_query_once(.req)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":".req httr2_request object describing API query","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"wiki_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"","code":"# List the first batch of categories that Albert Einstein belongs to response <- wiki_action_request(   prop = \"categories\",   titles = \"Albert Einstein\"   ) %>%   perform_query_once()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"Add required prefix URL parameters MediaWiki Action API request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"","code":"prefix_params(params, prefix)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"params character vector prefix character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify which pages to generate from the Action API — query_generate_pages","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"See API:Lists available generators. list actions MediaWiki API can also used generators. use list action generator, receive data pages attribute response body, rather name generator. can query_generate_pages query_page_properties choose properties page return.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"","code":"query_generate_pages(.req, generator, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify which pages to generate from the Action API — query_generate_pages","text":".req httr2_request, e.g. generated wiki_action_request generator type generator return ... Additional parameters generator","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"set additional parameters generator, prepend parameter \"g\". instance, set limit 10 number pages returned categorymembers generator, set parameter gcmlimit = 10.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"","code":"# Search for articles about seagulls  resp <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch=\"seagull\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$pages #> [[1]] #> [[1]]$pageid #> [1] 45232 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Jonathan Livingston Seagull\" #>  #> [[1]]$index #> [1] 4 #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 210481 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Gull\" #>  #> [[2]]$index #> [1] 2 #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 210492 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Seagull (disambiguation)\" #>  #> [[3]]$index #> [1] 5 #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 474370 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"The Seagull\" #>  #> [[4]]$index #> [1] 3 #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 887152 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Barbara Hershey\" #>  #> [[5]]$index #> [1] 7 #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 6386157 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Seagull management\" #>  #> [[6]]$index #> [1] 6 #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 12811837 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Seagull Camera\" #>  #> [[7]]$index #> [1] 10 #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 22496419 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"HMS Seagull\" #>  #> [[8]]$index #> [1] 9 #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 24071169 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Tianjin Seagull\" #>  #> [[9]]$index #> [1] 8 #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 58723600 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"Bobby Seagull\" #>  #> [[10]]$index #> [1] 1 #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify which pages to list from the action API — query_list_of","title":"Specify which pages to list from the action API — query_list_of","text":"See API:Lists available list actions. list action returns list pages, typically including pageid, namespace title. Individual lists particular properties can requested, usually prefaced two-word code based name list (e.g. specific properties categorymembers list action prefixed cm).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify which pages to list from the action API — query_list_of","text":"","code":"query_list_of(.req, list, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify which pages to list from the action API — query_list_of","text":".req httr2_request, e.g. generated wiki_action_request list type list return ... Additional parameters query, e.g. set configure list","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify which pages to list from the action API — query_list_of","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify which pages to list from the action API — query_list_of","text":"request performed, data returned body request query object, labeled chosen list action. want study actual pages listed, advisable retrieve pages directly using generator, rather listing IDs using list action. using list action, second request required get information page. Using generator, can query pages retrieve relevant properties single API call.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify which pages to list from the action API — query_list_of","text":"","code":"# Get the ten most recently added pages in Category:Physics  resp <- wiki_action_request() %>%   query_list_of(\"categorymembers\", cmsort = \"timestamp\",     cmdir = \"desc\", cmtitle = \"Category:Physics\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$categorymembers #> [[1]] #> [[1]]$pageid #> [1] 570922 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Action at a distance\" #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 1854369 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Hydraulic head\" #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 36477012 #>  #> [[3]]$ns #> [1] 14 #>  #> [[3]]$title #> [1] \"Category:Concepts in physics\" #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 70983414 #>  #> [[4]]$ns #> [1] 14 #>  #> [[4]]$title #> [1] \"Category:Physics by country\" #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 71976587 #>  #> [[5]]$ns #> [1] 14 #>  #> [[5]]$title #> [1] \"Category:Physics events\" #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 23479 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Physicalism\" #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 10844347 #>  #> [[7]]$ns #> [1] 14 #>  #> [[7]]$title #> [1] \"Category:Physical systems\" #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 1310583 #>  #> [[8]]$ns #> [1] 14 #>  #> [[8]]$title #> [1] \"Category:History of physics\" #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 63332556 #>  #> [[9]]$ns #> [1] 14 #>  #> [[9]]$title #> [1] \"Category:Works about physics\" #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 69843652 #>  #> [[10]]$ns #> [1] 14 #>  #> [[10]]$title #> [1] \"Category:Physical modeling\" #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose properties to return for pages from the action API — query_page_properties","title":"Choose properties to return for pages from the action API — query_page_properties","text":"See API:Properties list available properties. Many additional parameters control behavior, can passed function named arguments.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"query_page_properties(.req, properties, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose properties to return for pages from the action API — query_page_properties","text":".req httr2_request, e.g. generated wiki_action_request properties properties request, either character vector string properties separated \"|\" ... Additional parameters pass, e.g. modify returned property request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose properties to return for pages from the action API — query_page_properties","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose properties to return for pages from the action API — query_page_properties","text":"query_page_properties can used combination query_generate_pages choose information retrieve generated pages. already list page ids titles, can build query using query_page_properties collect information .","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"# Search for articles about seagulls and return their links to other # language wikis  resp <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch=\"seagull\") %>%   query_page_properties(\"langlinks\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$pages #> [[1]] #> [[1]]$pageid #> [1] 45232 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Jonathan Livingston Seagull\" #>  #> [[1]]$index #> [1] 4 #>  #> [[1]]$langlinks #> [[1]]$langlinks[[1]] #> [[1]]$langlinks[[1]]$lang #> [1] \"ast\" #>  #> [[1]]$langlinks[[1]]$title #> [1] \"Juan Salvador Gaviota\" #>  #>  #> [[1]]$langlinks[[2]] #> [[1]]$langlinks[[2]]$lang #> [1] \"bg\" #>  #> [[1]]$langlinks[[2]]$title #> [1] \"Джонатан Ливингстън Чайката\" #>  #>  #> [[1]]$langlinks[[3]] #> [[1]]$langlinks[[3]]$lang #> [1] \"cs\" #>  #> [[1]]$langlinks[[3]]$title #> [1] \"Jonathan Livingston Racek\" #>  #>  #> [[1]]$langlinks[[4]] #> [[1]]$langlinks[[4]]$lang #> [1] \"de\" #>  #> [[1]]$langlinks[[4]]$title #> [1] \"Die Möwe Jonathan\" #>  #>  #> [[1]]$langlinks[[5]] #> [[1]]$langlinks[[5]]$lang #> [1] \"el\" #>  #> [[1]]$langlinks[[5]]$title #> [1] \"Ο γλάρος Ιωνάθαν Λίβινγκστον\" #>  #>  #> [[1]]$langlinks[[6]] #> [[1]]$langlinks[[6]]$lang #> [1] \"es\" #>  #> [[1]]$langlinks[[6]]$title #> [1] \"Juan Salvador Gaviota\" #>  #>  #> [[1]]$langlinks[[7]] #> [[1]]$langlinks[[7]]$lang #> [1] \"eu\" #>  #> [[1]]$langlinks[[7]]$title #> [1] \"Jonatan Kaioa\" #>  #>  #> [[1]]$langlinks[[8]] #> [[1]]$langlinks[[8]]$lang #> [1] \"fa\" #>  #> [[1]]$langlinks[[8]]$title #> [1] \"جاناتان مرغ دریایی\" #>  #>  #> [[1]]$langlinks[[9]] #> [[1]]$langlinks[[9]]$lang #> [1] \"fi\" #>  #> [[1]]$langlinks[[9]]$title #> [1] \"Lokki Joonatan\" #>  #>  #> [[1]]$langlinks[[10]] #> [[1]]$langlinks[[10]]$lang #> [1] \"fr\" #>  #> [[1]]$langlinks[[10]]$title #> [1] \"Jonathan Livingston le goéland\" #>  #>  #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 210481 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Gull\" #>  #> [[2]]$index #> [1] 2 #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 210492 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Seagull (disambiguation)\" #>  #> [[3]]$index #> [1] 5 #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 474370 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"The Seagull\" #>  #> [[4]]$index #> [1] 3 #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 887152 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Barbara Hershey\" #>  #> [[5]]$index #> [1] 7 #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 2305766 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"British Seagull\" #>  #> [[6]]$index #> [1] 10 #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 4637606 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Seagull Book\" #>  #> [[7]]$index #> [1] 9 #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 6386157 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"Seagull management\" #>  #> [[8]]$index #> [1] 6 #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 24071169 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Tianjin Seagull\" #>  #> [[9]]$index #> [1] 8 #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 58723600 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"Bobby Seagull\" #>  #> [[10]]$index #> [1] 1 #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"Typically request MediaWiki Action API return limited number results. maximum results vary query, typically set 500. results server, API return continue object allowing request batches data. function handles continue object retrieves data desired query.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"","code":"retrieve_all(x)  # S3 method for httr2_request retrieve_all(x)  # S3 method for wiki_tbl retrieve_all(x)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"x object describing desired request. Either wiki_tbl httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"wiki_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"retrieve_all(httr2_request): Get available data constructed request retrieve_all(wiki_tbl): Complete query incomplete wiki_tbl","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"","code":"# Create a request object, then repeatedly retrieve all the pages # NB: the 'uclimit' parameter sets the number of pages retrieved by each # API call. jimbos_contributions <- wiki_action_request() %>%   query_list_of(\"usercontribs\", ucuser=\"Jimbo_Wales\", uclimit=500) %>%   retrieve_all() # To confirm, the resulting tibble has more than 500 rows nrow(jimbos_contributions) #> [1] 14194  # Alternatively, you can try out a request using perform_query_once(), and # if you are happy with the resulting data, retrieve the rest of the results # from the returned data frame preview <- wiki_action_request() %>%   query_page_properties(\"categories\", titles=\"Albert Einstein\") %>%   perform_query_once() print(preview) #> <wiki_tbl> #> Request URL: #> https://en.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&prop=categories&titles=Albert%20Einstein #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ! Data not fully downloaded for last batch. Retrieve it with `next_batch()` or `retrieve_all()`. #> # A tibble: 10 × 4 #>    pageid    ns title           categories       #>     <int> <int> <chr>           <list>           #>  1    736     0 Albert Einstein <named list [2]> #>  2    736     0 Albert Einstein <named list [2]> #>  3    736     0 Albert Einstein <named list [2]> #>  4    736     0 Albert Einstein <named list [2]> #>  5    736     0 Albert Einstein <named list [2]> #>  6    736     0 Albert Einstein <named list [2]> #>  7    736     0 Albert Einstein <named list [2]> #>  8    736     0 Albert Einstein <named list [2]> #>  9    736     0 Albert Einstein <named list [2]> #> 10    736     0 Albert Einstein <named list [2]> all_results <- retrieve_all(preview)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"Wikimedia Foundation publishes MD5 checksums database dumps. function looks published sha1 checksums based file name, compares locally calcualte using openssl package.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"","code":"verify_xml_integrity(path)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"path path file","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"True (invisibly) successful, otherwise error","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"","code":"akan_wiki <- wikkitidy_example(\"akan_wiki\") verify_xml_integrity(akan_wiki)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate request for the MediaWiki Action API — wiki_action_request","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"Generate request MediaWiki Action API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"","code":"wiki_action_request(..., action = \"query\", language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"... Parameters request action action perform, typically 'query' language language edition Wikipedia request, e.g. 'en' 'fr'","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"wiki_action_request, S3 list subclasses httr2_request (see httr2::request)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"","code":"# List the first 10 pages in the category 'Australian historians'  request <- wiki_action_request(   list = \"categorymembers\",   cmtitle = \"Category:Australian_historians\",   cmlimit = 10 ) request %>%   httr2::req_perform() %>%   httr2::resp_body_json() %>%   .$query %>%   .$categorymembers #> [[1]] #> [[1]]$pageid #> [1] 72000612 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Michelle Arrow\" #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 46828642 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Craig Benjamin\" #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 59403076 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Frank Bongiorno\" #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 31593145 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"R. J. B. Bosworth\" #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 23093698 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Tim Bowden\" #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 22906640 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Phillip Bradley\" #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 33224431 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Richard Broome\" #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 68287945 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"David Brophy (historian)\" #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 8898515 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Trevor R. Bryce\" #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 19158257 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"Bill Bunbury\" #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of Wikipedia data as tibble, with request metadata stored as\nattributes — wiki_tbl","title":"Representation of Wikipedia data as tibble, with request metadata stored as\nattributes — wiki_tbl","text":"Representation Wikipedia data tibble, request metadata stored attributes","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of Wikipedia data as tibble, with request metadata stored as\nattributes — wiki_tbl","text":"","code":"wiki_tbl(x, request, continue, batchcomplete)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of Wikipedia data as tibble, with request metadata stored as\nattributes — wiki_tbl","text":"x tibble request httr2_request object used generate tibble continue continue parameter returned API batchcomplete batchcomplete parameter returned API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Representation of Wikipedia data as tibble, with request metadata stored as\nattributes — wiki_tbl","text":"tibble: S3 data.frame class wiki_tbl.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikidiff_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","title":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","text":"data frame representing differences two revisions, following Wikidiff2 schema","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikidiff_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","text":"","code":"wikidiff_tbl(x, request)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikidiff_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","text":"x data. list diffs formatted tbl request httr2_request used retrieve data","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikidiff_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","text":"data.frame class wikidiff_tbl, inheriting wiki_tbl","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikidiff_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A data frame representing the differences between two revisions, following\nthe Wikidiff2 schema — wikidiff_tbl","text":"","code":"#TODO"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","title":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","text":"wrapper around Wikipedia's major APIs: MediaWiki Action API, REST API Wikmedia REST API. three APIs provide complementary functionality analysis Wikipedia social scientists digital humanists. package provides tidy interface three APIs, along range functions solve common tasks Wikipedia research.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","text":"Maintainer: Michael Falk michaelgfalk@gmail.com (ORCID)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to wikkitidy example — wikkitidy_example","title":"Get path to wikkitidy example — wikkitidy_example","text":"wikkitidy comes bundled number sample files inst/extdata directory. function make easy access","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example(file = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to wikkitidy example — wikkitidy_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example() #> [1] \"akan_wiki\" wikkitidy_example(\"akan_wiki\") #> [1] \"/home/runner/work/_temp/Library/wikkitidy/extdata/akwiki-20230301-pages-articles-multistream-index.txt.bz2\""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-development-version","dir":"Changelog","previous_headings":"","what":"wikkitidy (development version)","title":"wikkitidy (development version)","text":"Underlying interface three main APIs: [core_rest_request], [wiki_action_request] [wikimedia_rest_request] First vector functions getting page-level data First helper functions build complex Action API requests First data types response values","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-0109000","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.0.9000","title":"wikkitidy 0.1.0.9000","text":"Added NEWS.md file track changes package. New low-level helper, [get_rest_resource], generating REST API calls; refactored existing calls use function","code":""}]
