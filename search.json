[{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement michaelgfalk@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 wikkitidy authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Falk. Author, maintainer, copyright holder.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falk M (2024). wikkitidy: Tidy Analysis Wikipedia. R package version 0.1.11.9000, https://wikihistories.github.io/wikkitidy/.","code":"@Manual{,   title = {wikkitidy: Tidy Analysis of Wikipedia},   author = {Michael Falk},   year = {2024},   note = {R package version 0.1.11.9000},   url = {https://wikihistories.github.io/wikkitidy/}, }"},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"wikkitidy-","dir":"","previous_headings":"","what":"Tidy Analysis of Wikipedia","title":"Tidy Analysis of Wikipedia","text":"Tidy analysis Wikipedia R","code":""},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":"Tidy Analysis of Wikipedia","text":"wiki: many wikis, one dominates Wikiverse. Wikipedia largest repository facts ever assembled human hands. Scholars world turning Wikipedia understand twenty-first century society understands . quiddity: ‘whatness’ thing. kind thing . Wikipedia? merely another encyclopaedia? news presented history? consensus global village, battleground ideological war? tidy: best kind data. R programmers lucky access tidyverse, collection packages make easy analyse, visualise publish data. package embodies tidy data principles returning results Wikipedia’s APIs tibbles simple vectors, providing number vectorised analysis functions can applied reliably without fuss data retrieve. Thus wikkitidy’s aim: help work Wikipedia minimal data wrangling cleaning.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Analysis of Wikipedia","text":"can install wikkitidy CRAN : can install development version Github : ur ## Code Conduct Please note wikkitidy project released Contributor Code Conduct. contributing project, agree abide terms.","code":"install.packages(\"wikkitidy\") devtools::install_github(\"wikihistories/wikkitidy\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/append_query_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine new results for a query with previously downloaded results — append_query_result","title":"Combine new results for a query with previously downloaded results — append_query_result","text":"Combine new results query previously downloaded results","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/append_query_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine new results for a query with previously downloaded results — append_query_result","text":"","code":"append_query_result(old, new)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/append_query_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine new results for a query with previously downloaded results — append_query_result","text":"old query_tbl previous results new query_tbl new results server","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/append_query_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine new results for a query with previously downloaded results — append_query_result","text":"new query_tbl appropriate subclass, depending whether batch complete.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure that the limit is correct for the endpoint. Raise an error if not. — check_limit","title":"Ensure that the limit is correct for the endpoint. Raise an error if not. — check_limit","text":"Ensure limit correct endpoint. Raise error .","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure that the limit is correct for the endpoint. Raise an error if not. — check_limit","text":"","code":"check_limit(limit, max)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure that the limit is correct for the endpoint. Raise an error if not. — check_limit","text":"limit limit added query max maximum allowed given endpoint","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure that the limit is correct for the endpoint. Raise an error if not. — check_limit","text":"limit, assuming errors","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure namespace arguments are valid — check_namespace","title":"Ensure namespace arguments are valid — check_namespace","text":"Ensure namespace arguments valid","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure namespace arguments are valid — check_namespace","text":"","code":"check_namespace(namespace)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure namespace arguments are valid — check_namespace","text":"namespace integer vector namespace ids, NULL","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/check_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure namespace arguments are valid — check_namespace","text":"character vector namespace, spliced together |, NULL","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the Action API continually until a continuation condition no longer\nholds. — continue_query","title":"Query the Action API continually until a continuation condition no longer\nholds. — continue_query","text":"Query Action API continually continuation condition longer holds.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the Action API continually until a continuation condition no longer\nholds. — continue_query","text":"","code":"continue_query(last_result, predicate, max_requests = 1000)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the Action API continually until a continuation condition no longer\nholds. — continue_query","text":"last_result query_tbl results complete predicate condition. Results continually requested evaluates 'false'.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the Action API continually until a continuation condition no longer\nholds. — continue_query","text":"query_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"two revisions Wikipedia page can compared using 'diff' tool. tool compares '' revision '' revision, looking insertions, deletions relocations text. operation can performed order, across span revisions.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"get_diff(from, to, language = \"en\", simplify = TRUE)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"Vector revision ids Vector revision ids language Vector two-letter language codes (recycled length==1) simplify logical: R simplify result (see return)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"return value depends simplify parameter. simplify == TRUE: list tibble::tbl_df objects length . response data stripped away, leaving just textual differences revisions, location, type 'highlightRanges' textual differences complicated. simplify == FALSE: list length containing full wikidiff2 response pair revisions. response includes additional data displaying diffs onscreen.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"# Compare revision 847170467 to 851733941 on English Wikipedia get_diff(847170467, 851733941) #> # A tibble: 2 × 5 #>    type lineNumber text                                    offset_from offset_to #>   <int>      <int> <chr>                                         <int>     <int> #> 1     1         97 \"\"                                               NA     15633 #> 2     1         98 \"In 2016, a new species of [[Cecidomyi…          NA     15634  # The function is vectorised, so you can compare multiple pairs of revisions # in a single call # See diffs for the last two revisions of the Main Page revisions <- wiki_action_request() %>%   query_by_title(\"Main Page\") %>%   query_page_properties(     \"revisions\",     rvlimit = 2, rvprop = \"ids\", rvdir = \"older\"   ) %>%   next_result() %>%   tidyr::unnest(cols = c(revisions)) %>%   dplyr::mutate(diffs = get_diff(from = parentid, to = revid)) revisions #> # A tibble: 2 × 6 #>     pageid    ns title          revid   parentid diffs            #>      <int> <int> <chr>          <int>      <int> <list>           #> 1 15580374     0 Main Page 1189617895 1189471054 <tibble [2 × 6]> #> 2 15580374     0 Main Page 1189471054 1114291180 <tibble [2 × 6]>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count how many times Wikipedia articles have been edited — get_history_count","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"Count many times Wikipedia articles edited","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"","code":"get_history_count(   title,   type = c(\"edits\", \"anonymous\", \"bot\", \"editors\", \"minor\", \"reverted\"),   from = NULL,   to = NULL,   language = \"en\" )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"title vector article titles type type edit count Optional: vector revision ids Optional: vector revision ids language Vector two-letter language codes Wikipedia editions","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"tibble::tbl_df two columns: 'count': integer, number edits given type 'limit': logical, whether 'count' exceeds API's limit. type edit different limit. 'count' exceeds limit, limit returned count 'limit' set TRUE","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"","code":"# Get the number of edits made by auto-confirmed editors to a page between # revisions 384955912 and 406217369 get_history_count(\"Jupiter\", \"editors\", 384955912, 406217369) #> # A tibble: 1 × 2 #>   count limit #>   <int> <lgl> #> 1    65 FALSE  # Compare which authors have the most edit activity authors <- tibble::tribble(   ~author,   \"Jane Austen\",   \"William Shakespeare\",   \"Emily Dickinson\" ) %>%   dplyr::mutate(get_history_count(author)) authors #> # A tibble: 3 × 3 #>   author              count limit #>   <chr>               <int> <lgl> #> 1 Jane Austen          5917 FALSE #> 2 William Shakespeare 13457 FALSE #> 3 Emily Dickinson      5468 FALSE"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a query using the MediaWiki Action API — get_query_results","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"next_result() sends exactly one request server. next_batch() requests results server data complete latest batch pages result. retrieve_all() keeps requesting data pages query returned.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"","code":"next_result(x)  next_batch(x)  retrieve_all(x)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"x query. Either wiki_action_request query_tbl.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"query_tbl containing results query. x query_tbl, function return new data new data appended . x wiki_action_request, returned query_tbl contain necessary data supply future calls next_result(), next_batch() retrieve_all().","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"rare query can fulfilled single request server. two ways query can incomplete. queries return list pages result. result may incomplete data page returned. case batch incomplete. data may complete pages, pages available server. case query can continued. Thus three functions next_result(), next_batch() retrieve_all().","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_query_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform a query using the MediaWiki Action API — get_query_results","text":"","code":"# Try out a request using next_result(), then retrieve the rest of the # results. The clllimt limits the first request to 40 results. preview <- wiki_action_request() %>%   query_by_title(\"Steve Wozniak\") %>%   query_page_properties(\"categories\", cllimit = 40) %>%   next_result() preview #> <incomplete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ! Data not fully downloaded for last batch. Retrieve it with `next_batch()` or `retrieve_all()`. #> # A tibble: 1 × 4 #>   pageid    ns title         categories        #>    <int> <int> <chr>         <list>            #> 1  27848     0 Steve Wozniak <tibble [40 × 2]>  all_results <- retrieve_all(preview) all_results #> <final/query_tbl> #> ✔ All results downloaded from server #> ✔ Data complete for all records #> # A tibble: 1 × 4 #>   pageid    ns title         categories        #>    <int> <int> <chr>         <list>            #> 1  27848     0 Steve Wozniak <tibble [81 × 2]>  # tidyr is useful for list-columns. all_results %>%   tidyr::unnest(cols=c(categories), names_sep = \"_\") #> # A tibble: 81 × 5 #>    pageid    ns title         categories_ns categories_title                     #>     <int> <int> <chr>                 <int> <chr>                                #>  1  27848     0 Steve Wozniak            14 Category:1950 births                 #>  2  27848     0 Steve Wozniak            14 Category:20th-century American busi… #>  3  27848     0 Steve Wozniak            14 Category:20th-century American engi… #>  4  27848     0 Steve Wozniak            14 Category:20th-century American inve… #>  5  27848     0 Steve Wozniak            14 Category:21st-century American busi… #>  6  27848     0 Steve Wozniak            14 Category:21st-century American engi… #>  7  27848     0 Steve Wozniak            14 Category:21st-century American inve… #>  8  27848     0 Steve Wozniak            14 Category:Academic staff of the Univ… #>  9  27848     0 Steve Wozniak            14 Category:All articles with unsource… #> 10  27848     0 Steve Wozniak            14 Category:Amateur radio people        #> # ℹ 71 more rows"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"function intended developer use. makes easy quickly generate vectorised calls different APIs.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"","code":"get_rest_resource(   ...,   language = \"en\",   api = c(\"core\", \"wikimedia\", \"wikimedia_org\", \"xtools\"),   response_format = c(\"json\", \"html\"),   response_type = NULL,   failure_mode = c(\"error\", \"quiet\") )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"... <dynamic-dots> URL components query parameters desired resources. Names arguments ignored. function follows tidyverse vector recycling rules, vectors must length length one. Unnamed arguments appended URL path; named arguments added query parameters language Character vector two-letter language codes api desired REST api: \"core\", \"wikimedia\", \"wikimedia_org\", \"xtools\" response_format expected Content-Type response. Currently \"html\" \"json\" supported. response_type schema response. supplied, results parsed using schema. failure_mode respond request fails \"error\", default: raise error \"quiet\", silently return NA","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"list responses. response_format == \"json\", responses simple R lists. response_format == \"html\", responses xml_document objects. response_type supplied, response coerced tibble::tbl_df vector using relevant schema. response 'scalar list' (.e. list length == 1), silently unlisted, returning simple list vector.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/id_or_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a page parameter comprises titles or pageids, and prefix\naccordingly. — id_or_title","title":"Determine if a page parameter comprises titles or pageids, and prefix\naccordingly. — id_or_title","text":"Determine page parameter comprises titles pageids, prefix accordingly.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/id_or_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a page parameter comprises titles or pageids, and prefix\naccordingly. — id_or_title","text":"","code":"id_or_title(page, prefix = NULL)  # S3 method for character id_or_title(page, prefix = NULL)  # S3 method for numeric id_or_title(page, prefix = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/id_or_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a page parameter comprises titles or pageids, and prefix\naccordingly. — id_or_title","text":"page Either character numeric vector. character vector, interpreted vector page titles. numeric vector, pageids. prefix Optional: prefix affix page titles missing","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/id_or_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a page parameter comprises titles or pageids, and prefix\naccordingly. — id_or_title","text":"list","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_generator_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for generator query type — new_generator_query","title":"Constructor for generator query type — new_generator_query","text":"Construct new query generator module Action API. low-level constructor performs basic type-checking. responsibility ensure chosen generator existing API endpoint, composed query correctly. user-friendly interface, use query_generate_pages.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_generator_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for generator query type — new_generator_query","text":"","code":"new_generator_query(.req, generator, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_generator_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for generator query type — new_generator_query","text":".req query/action_api/httr2_request object, generator query returned function. generator generator add query. generator based property module, .req must subtype prop/query/action_api/httr2_request. generator based list module, .req must subclass query/action_api/httr2_request directly. ... <dynamic-dots> parameters generator","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_generator_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for generator query type — new_generator_query","text":"output type depends input. .req query/action_api/httr2_request, output generator/query/action_api/httr2_request. .req prop/query/action_api/httr2_request, return object subclass passed request, \"generator\" first term class vector, .e. generator/(titles|pageids|revids)/prop/query/action_api/httr2_request.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_generator_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for generator query type — new_generator_query","text":"","code":"# Build a generator query using a list module # List all members of Category:Physics on English Wikipedia physics <- wiki_action_request() %>%   new_generator_query(\"categorymembers\", gcmtitle = \"Category:Physics\")  # Build a generator query on a property module # Generate the pages that are linked to Albert Einstein's page on English # Wikipedia einstein_categories <- wiki_action_request() %>%   new_prop_query(\"titles\", \"Albert Einstein\") %>%   new_generator_query(\"iwlinks\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_list_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for list queries — new_list_query","title":"Constructor for list queries — new_list_query","text":"low-level constructor performs basic type checking.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_list_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for list queries — new_list_query","text":"","code":"new_list_query(.req, list, ...)  # S3 method for list new_list_query(.req, list, ...)  # S3 method for generator new_list_query(.req, list, ...)  # S3 method for prop new_list_query(.req, list, ...)  # S3 method for query new_list_query(.req, list, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_list_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for list queries — new_list_query","text":".req query/action_api/httr2_request object, list/query/action_api/httr2_request returned function. list list module add query ... <dynamic-dots> Parameters list module","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_list_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for list queries — new_list_query","text":"object type list/query/action_api/httr2_request.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_list_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for list queries — new_list_query","text":"","code":"# Create a query to list all members of Category:Physics physics_query <- wiki_action_request() %>%   new_list_query(\"categorymembers\", cmtitle=\"Category:Physics\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_prop_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for the property query type — new_prop_query","title":"Constructor for the property query type — new_prop_query","text":"intended use query set 'titles', 'pageids' 'revids' parameter, enforce one set. property modules API Action API require parameter set, require generator parameter set instead. prop/query type abstract type representing three possible kinds property query rely generator (see return value). complication prop/query can used basis generator.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_prop_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for the property query type — new_prop_query","text":"","code":"new_prop_query(.req, by, pages, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_prop_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for the property query type — new_prop_query","text":".req query/action_api/httr2_request object, prop query object returned function. parameter covariant type, can also pass subtypes prop. type page. Allowed values : pageids, titles, revids pages string, pages query , corresponding '' parameter. Multiple values separated \"|\" ... <dynamic-dots> parameters query","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_prop_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for the property query type — new_prop_query","text":"properly qualified prop/query object. six possibilities: titles/prop/query pageids/prop/query revids/prop/query generator/titles/prop/query generator/pageids/prop/query generator/revids/prop/query","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/new_prop_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for the property query type — new_prop_query","text":"","code":"# Build a query on a set of pageids # 963273 and 1159171 are Kate Bush albums bush_albums_query <- wiki_action_request() %>%   new_prop_query(\"pageids\", \"963273|1159171\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data about pages from their titles — page_vector_functions","title":"Get data about pages from their titles — page_vector_functions","text":"get_latest_revision() returns metadata latest revision page. get_page_html() returns rendered html page. get_page_summary() returns metadata latest revision, along page description summary extracted opening paragraph get_page_related() returns summaries 20 related pages passed page get_page_talk() returns structured talk page content title. must ensure use title Talk page , e.g. \"Talk:Earth\" rather \"Earth\" get_page_langlinks() returns interwiki links title","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data about pages from their titles — page_vector_functions","text":"","code":"get_latest_revision(title, language = \"en\")  get_page_html(title, language = \"en\")  get_page_summary(title, language = \"en\")  get_page_related(title, language = \"en\")  get_page_talk(title, language = \"en\")  get_page_langlinks(title, language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data about pages from their titles — page_vector_functions","text":"title character vector page titles. language character vector two-letter language codes, either length 1 length title","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data about pages from their titles — page_vector_functions","text":"list, vector tibble, length title, desired data.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data about pages from their titles — page_vector_functions","text":"","code":"# Get language links for a known page on English Wikipedia get_page_langlinks(\"Charles Harpur\") #> # A tibble: 2 × 4 #>   code  name     key            title          #>   <chr> <chr>    <chr>          <chr>          #> 1 de    Deutsch  Charles_Harpur Charles Harpur #> 2 fr    français Charles_Harpur Charles Harpur  # Many of these functions return a list of data frames. Tidyr can be useful. # Get 20 related pages for German City cities <- tibble::tribble(   ~city,   \"Berlin\",   \"Darmstadt\", ) %>%   dplyr::mutate(related = get_page_related(city)) cities #> # A tibble: 2 × 2 #>   city      related            #>   <chr>     <list>             #> 1 Berlin    <tibble [20 × 32]> #> 2 Darmstadt <tibble [20 × 32]>  # Unest to get one row per related page: tidyr::unnest(cities, \"related\") #> # A tibble: 40 × 33 #>    city  pageid    ns index type  title displaytitle namespace_id namespace_text #>    <chr>  <int> <int> <int> <chr> <chr> <chr>               <int> <chr>          #>  1 Berl… 3.76e3     0    18 stan… Bran… \"<span clas…            0 \"\"             #>  2 Berl… 1.19e4     0    15 stan… Germ… \"<span clas…            0 \"\"             #>  3 Berl… 4.91e4     0    14 stan… Pots… \"<span clas…            0 \"\"             #>  4 Berl… 5.59e4     0    16 stan… Vien… \"<span clas…            0 \"\"             #>  5 Berl… 1.48e5     0    10 stan… Berl… \"<span clas…            0 \"\"             #>  6 Berl… 1.57e5     0     6 stan… Bran… \"<span clas…            0 \"\"             #>  7 Berl… 2.72e5     0     3 stan… Berl… \"<span clas…            0 \"\"             #>  8 Berl… 3.88e5     0    12 stan… Mitte \"<span clas…            0 \"\"             #>  9 Berl… 4.33e5     0     8 stan… Berl… \"<span clas…            0 \"\"             #> 10 Berl… 1.14e6     0     9 stan… Hert… \"<span clas…            0 \"\"             #> # ℹ 30 more rows #> # ℹ 24 more variables: wikibase_item <chr>, titles_canonical <chr>, #> #   titles_normalized <chr>, titles_display <chr>, thumbnail_source <chr>, #> #   thumbnail_width <int>, thumbnail_height <int>, originalimage_source <chr>, #> #   originalimage_width <int>, originalimage_height <int>, lang <chr>, #> #   dir <chr>, revision <chr>, tid <chr>, timestamp <chr>, description <chr>, #> #   description_source <chr>, coordinates_lat <dbl>, coordinates_lon <dbl>, …  # The functions are vectorised over title and language # Find all articles about Joanna Baillie, and retrieve summary data for # the first two. baillie <- get_page_langlinks(\"Joanna Baillie\") %>%   dplyr::slice(1:2) %>%   dplyr::mutate(get_page_summary(title = title, language = code)) baillie #> # A tibble: 2 × 30 #>   code  name    key        title  type  displaytitle namespace_id namespace_text #>   <chr> <chr>   <chr>      <chr>  <chr> <chr>               <int> <chr>          #> 1 ar    العربية جوانا_بيلي جوانا… stan… \"<span clas…            0 \"\"             #> 2 arz   مصرى    جوانا_بيلى جوانا… stan… \"<span clas…            0 \"\"             #> # ℹ 22 more variables: wikibase_item <chr>, titles_canonical <chr>, #> #   titles_normalized <chr>, titles_display <chr>, pageid <int>, #> #   thumbnail_source <chr>, thumbnail_width <int>, thumbnail_height <int>, #> #   originalimage_source <chr>, originalimage_width <int>, #> #   originalimage_height <int>, lang <chr>, dir <chr>, revision <chr>, #> #   tid <chr>, timestamp <chr>, description <chr>, description_source <chr>, #> #   content_urls_desktop <list>, content_urls_mobile <list>, extract <chr>, …"},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"Wikipedia's APIs provide data using range different json schemas. generic function converts data convenient formats use R data frame.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"","code":"# S3 method for wikidiff2 parse_response(response)  parse_response(response)  # S3 method for default parse_response(response)  # S3 method for row_list parse_response(response)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"response data retrieved Wikipedia.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"vector length response. Generally, simple vector, tibble::tbl_df list tibble::tbl_df objects.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"parse_response(wikidiff2): Simplify wikidiff2 response dataframe textual differences, discarding display data parse_response(default): default, create list nested tbl_dfs parse_response(row_list): Many endpoints return list named values page, can easily row-bound. often contain nested data, however, automatically unnested dplyr::bind_rows. Hence basic approach.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a single request to the Action API. — perform_query","title":"Perform a single request to the Action API. — perform_query","text":"function workhorse behind user-facing next_result(), next_batch() retrieve_all().","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a single request to the Action API. — perform_query","text":"","code":"perform_query(request, continue)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a single request to the Action API. — perform_query","text":"request request object continue continue parameter returned previous request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a single request to the Action API. — perform_query","text":"query_tbl() results","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"Add required prefix URL parameters MediaWiki Action API request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"","code":"prefix_params(params, prefix)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"params character vector prefix character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/process_timestamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert passed objects into ISO8601 strings for API requests — process_timestamps","title":"Convert passed objects into ISO8601 strings for API requests — process_timestamps","text":"Convert passed objects ISO8601 strings API requests","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/process_timestamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert passed objects into ISO8601 strings for API requests — process_timestamps","text":"","code":"process_timestamps(...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/process_timestamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert passed objects into ISO8601 strings for API requests — process_timestamps","text":"... Dynamic dots: objects coerced","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/process_timestamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert passed objects into ISO8601 strings for API requests — process_timestamps","text":"named list ISO strings, length ...","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":"functions help build query MediaWiki Action API already set pages wish investigate. functions can combined query_page_properties choose properties return passed pages.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":"","code":"query_by_title(.req, title)  query_by_pageid(.req, pageid)  query_by_revid(.req, revid)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":".req wiki_action_request query modify title character vector page titles pageid character numeric vector page ids revid character numeric vector revision ids","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":"request object type pages/query/action_api/httr2_request. perform query, pass object next_batch retrieve_all","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":"already know pages wish examine, can build query find pages meet certain criteria using query_list_pages query_generate_pages.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_by_.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the MediaWiki Action API using a vector of\nWikipedia pages — query_by_","text":"","code":"# Retrieve the categories for Charles Harpur's Wikipedia page  resp <- wiki_action_request() %>%   query_by_title(\"Charles Harpur\") %>%   query_page_properties(\"categories\") %>%   next_batch()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_category_members.html","id":null,"dir":"Reference","previous_headings":"","what":"Explore Wikipedia's category system — query_category_members","title":"Explore Wikipedia's category system — query_category_members","text":"functions provide access CategoryMembers endpoint Action API. query_category_members() builds generator query return members given category. build_category_tree() finds pages subcategories beneath passed category, recursively finds pages subcategories beneath , can find subcategories.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_category_members.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Explore Wikipedia's category system — query_category_members","text":"","code":"query_category_members(   .req,   category,   namespace = NULL,   type = c(\"file\", \"page\", \"subcat\"),   limit = 10,   sort = c(\"sortkey\", \"timestamp\"),   dir = c(\"ascending\", \"descending\", \"newer\", \"older\"),   start = NULL,   end = NULL,   language = \"en\" )  build_category_tree(category, language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_category_members.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Explore Wikipedia's category system — query_category_members","text":".req query request object category category start . query_category_members() accepts either numeric pageid page title. build_category_tree() accepts vector page titles. namespace return category members provided namespace type Alternative namespace: type category member return. Multiple types can requested using character vector. Defaults . limit number return batch. Max 500. sort sort returned category members. 'timestamp' sorts date included category; 'sortkey' category member's unique hexadecimal code dir direction sort start sort == 'timestamp', return category members date. argument parsed lubridate::as_date() end sort == 'timestamp', return category members included category date. argument parsed lubridate::as_date() language language edition Wikipedia query","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_category_members.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Explore Wikipedia's category system — query_category_members","text":"query_category_members(): request object type generator/query/action_api/httr2_request, can passed next_batch() retrieve_all(). can specify properties retrieve page using query_page_properties(). build_category_tree(): list containing two dataframes. nodes lists subcategories pages found underneath passed categories. edges records connections . source column gives pageid parent category, target column gives pageid categories, pages files contained within source category. timestamp records moment target page subcategory included source category. two dataframes list can passed igraph::graph_from_data_frame network analysis.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_category_members.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Explore Wikipedia's category system — query_category_members","text":"","code":"# Get the first 10 pages in 'Category:Physics' on English Wikipedia physics_members <- wiki_action_request() %>%   query_category_members(\"Physics\") %>% next_batch() physics_members #> <complete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ✔ Data complete for all records #> # A tibble: 10 × 3 #>      pageid    ns title                            #>       <int> <int> <chr>                            #>  1     6019     0 Computational chemistry          #>  2    22939     0 Physics                          #>  3   172586     0 Laser cooling                    #>  4  1653925   100 Portal:Physics                   #>  5 74609356     0 Force control                    #>  6 74985603     0 Edge states                      #>  7 75395346     0 Dynamic toroidal dipole          #>  8 75542417     0 Olsen cycle                      #>  9 75702882     1 Talk:Dynamic toroidal dipole     #> 10 75821836     0 Isoelectric (electric potential)   # Build the tree of all albums for the Melbourne band Custard tree <- build_category_tree(\"Category:Custard_(band)_albums\") #> ⠙ Walking subcategories: 1 done (547/s) | 2ms #> ⠹ Walking subcategories: 2 done (21/s) | 96ms tree #> $nodes #> # A tibble: 11 × 4 #>      pageid    ns title                                      type   #>       <int> <int> <chr>                                      <chr>  #>  1 41181643    14 Category:Custard_(band)_albums             root   #>  2 47888836     0 Come Back, All Is Forgiven                 page   #>  3 59271122     0 The Common Touch (album)                   page   #>  4 30333352     0 Loverama                                   page   #>  5 63691299     0 Respect All Lifeforms                      page   #>  6 43770191     0 Wahooti Fandango                           page   #>  7 30333401     0 We Have the Technology                     page   #>  8 43769837     0 Wisenheimer                                page   #>  9 41148700    14 Category:Custard (band) compilation albums subcat #> 10 43770688     0 Brisbane 1990–1993                         page   #> 11 43770872     0 Goodbye Cruel World (Custard album)        page   #>  #> $edges #> # A tibble: 10 × 3 #>      source   target timestamp            #>       <int>    <int> <chr>                #>  1 41181643 47888836 2015-09-21T10:58:43Z #>  2 41181643 59271122 2019-01-06T17:20:32Z #>  3 41181643 30333352 2013-11-24T21:09:05Z #>  4 41181643 63691299 2020-04-18T06:08:40Z #>  5 41181643 43770191 2014-09-08T08:02:46Z #>  6 41181643 30333401 2013-11-24T21:09:09Z #>  7 41181643 43769837 2014-09-08T06:31:49Z #>  8 41181643 41148700 2013-11-21T14:38:43Z #>  9 41148700 43770688 2015-05-20T06:12:07Z #> 10 41148700 43770872 2015-04-26T23:42:41Z #>   # For network analysis and visualisation, you can pass the category tree # to igraph tree_graph <- igraph::graph_from_data_frame(tree$edges, vertices = tree$nodes) tree_graph #> IGRAPH 71748bf DN-B 11 10 --  #> + attr: name (v/c), ns (v/n), title (v/c), type (v/c), timestamp (e/c) #> + edges from 71748bf (vertex names): #>  [1] 41181643->47888836 41181643->59271122 41181643->30333352 41181643->63691299 #>  [5] 41181643->43770191 41181643->30333401 41181643->43769837 41181643->41148700 #>  [9] 41148700->43770688 41148700->43770872"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":"Many endpoints Action API can used generators. Use list_all_generators() see complete list. main advantage using generator can chain calls query_page_properties() find specific information pages. possible queries constructed using query_list_pages().","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":"","code":"query_generate_pages(.req, generator, ...)  list_all_generators()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":".req httr2_request, e.g. generated wiki_action_request generator generator module wish use. list property modules can used, though . ... <dynamic-dots> Additional parameters generator","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":"query_generate_pages: modfied request, can passed next_batch retrieve_all appropriate. list_all_generators: tibble available generator modules. name column gives name generator, group column indicates whether generator based list module property module. Generators based property modules can added query already used query_by_ specify pages' properties generated.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":"two kinds generator: list-generators prop-generators. using prop-generator, need use query_by_() function tell API start , shown examples. set additional parameters generator, prepend parameter \"g\". instance, set limit 10 number pages returned categorymembers generator, set parameter gcmlimit = 10.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pages that meet certain criteria, or which are related to a set of\nknown pages by certain properties — query_generate_pages","text":"","code":"# Search for articles about seagulls seagulls <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch = \"seagull\") %>%   next_batch()  seagulls #> <complete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ✔ Data complete for all records #> # A tibble: 10 × 4 #>      pageid    ns title                       index #>       <int> <int> <chr>                       <int> #>  1    45232     0 Jonathan Livingston Seagull     3 #>  2   170483     0 A Flock of Seagulls            10 #>  3   210481     0 Gull                            1 #>  4   210492     0 Seagull (disambiguation)        5 #>  5   474370     0 The Seagull                     2 #>  6   887152     0 Barbara Hershey                 6 #>  7  6386157     0 Seagull management              7 #>  8 12811837     0 Seagull Camera                  9 #>  9 58723600     0 Bobby Seagull                   8 #> 10 73546753     0 BYD Seagull                     4"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"List pages that meet certain criteria — query_list_pages","title":"List pages that meet certain criteria — query_list_pages","text":"See API:Lists available list actions. list action returns list pages, typically including pageid, namespace title. Individual lists particular properties can requested, usually prefaced two-word code based name list (e.g. specific properties categorymembers list action prefixed cm).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List pages that meet certain criteria — query_list_pages","text":"","code":"query_list_pages(.req, list, ...)  list_all_list_modules()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List pages that meet certain criteria — query_list_pages","text":".req httr2_request, e.g. generated wiki_action_request list type list return ... <dynamic-dots> Additional parameters query, e.g. set configure list","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List pages that meet certain criteria — query_list_pages","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List pages that meet certain criteria — query_list_pages","text":"request performed, data returned body request query object, labeled chosen list action. want study actual pages listed, advisable retrieve pages directly using generator, rather listing IDs using list action. using list action, second request required get information page. Using generator, can query pages retrieve relevant properties single API call.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List pages that meet certain criteria — query_list_pages","text":"","code":"# Get the ten most recently added pages in Category:Physics physics_pages <- wiki_action_request() %>%   query_list_pages(\"categorymembers\",     cmsort = \"timestamp\",     cmdir = \"desc\", cmtitle = \"Category:Physics\"   ) %>%   next_batch()  physics_pages #> <complete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ✔ Data complete for all records #> # A tibble: 10 × 3 #>      pageid    ns title                            #>       <int> <int> <chr>                            #>  1     6019     0 Computational chemistry          #>  2 75821836     0 Isoelectric (electric potential) #>  3   172586     0 Laser cooling                    #>  4 75702882     1 Talk:Dynamic toroidal dipole     #>  5 75395346     0 Dynamic toroidal dipole          #>  6 75695397     1 Talk:Paul Harry Roberts          #>  7 75563080     0 Paul Harry Roberts               #>  8 75463818     0 Quasi-isodynamic stellarators    #>  9 75542417     0 Olsen cycle                      #> 10 75105818    14 Category:Eponyms in physics"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose properties to return for pages from the action API — query_page_properties","title":"Choose properties to return for pages from the action API — query_page_properties","text":"See API:Properties list available properties. Many additional parameters control behavior, can passed function named arguments.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"query_page_properties(.req, property, ...)  list_all_property_modules()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose properties to return for pages from the action API — query_page_properties","text":".req httr2_request, e.g. generated wiki_action_request property property request ... <dynamic-dots> Additional parameters pass, e.g. modify returned property request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose properties to return for pages from the action API — query_page_properties","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose properties to return for pages from the action API — query_page_properties","text":"query_page_properties useful . must combined query_by_ function query_generate_pages specify pages properties returned. noted many API:Properties modules can used generators. wish use property module way, must use query_generate_pages, passing name property module genenerator.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"# Search for articles about seagulls and retrieve their number of # watchers  resp <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch = \"seagull\") %>%   query_page_properties(\"info\", inprop = \"watchers\") %>%   next_batch() %>%   dplyr::select(pageid, ns, title, watchers) resp #> <complete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ✔ Data complete for all records #> # A tibble: 10 × 4 #>      pageid    ns title                       watchers #>       <int> <int> <chr>                          <int> #>  1    45232     0 Jonathan Livingston Seagull      140 #>  2   170483     0 A Flock of Seagulls              114 #>  3   210481     0 Gull                             173 #>  4   210492     0 Seagull (disambiguation)          NA #>  5   474370     0 The Seagull                       74 #>  6   887152     0 Barbara Hershey                  142 #>  7  6386157     0 Seagull management                32 #>  8 12811837     0 Seagull Camera                    NA #>  9 58723600     0 Bobby Seagull                     NA #> 10 73546753     0 BYD Seagull                       NA"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"Representation Wikipedia data returned Action API Query module tibble, request metadata stored attributes.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"","code":"query_tbl(x, request, continue, batchcomplete)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"x tibble request httr2_request object used generate tibble continue continue parameter returned API batchcomplete batchcomplete parameter returned API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"tibble: S3 data.frame class query_tbl.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://wikihistories.github.io/wikkitidy/reference/tidyeval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy eval helpers — tidyeval","text":"Consult original rlang documentation return types re-exported functions.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"Wikimedia Foundation publishes MD5 checksums database dumps. function looks published sha1 checksums based file name, compares locally calcualte using openssl package.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"","code":"verify_xml_integrity(path)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"path path file","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"True (invisibly) successful, otherwise error","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"Wikipedia exposes build query, first call wiki_action_request() create basic request object, use helper functions query_page_properties(), query_list_pages() query_generate_pages() modify request, calling next_batch() retrieve_all() perform query download results server.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"","code":"wiki_action_request(..., action = \"query\", language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"... <dynamic-dots> Parameters request action action perform, typically 'query' language language edition Wikipedia request, e.g. 'en' 'fr'","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"action_api object, S3 list subclasses httr2::request. dependencies different aspects Action API complex. time writing, five major subclasses action_api/httr2_request: generator/action_api/httr2_request, returned (sometimes) query_generate_pages list/action_api/httr2_request, returned query_list_pages titles, pageids revids/action_api/httr2_request, returned various query_by_ functions can use query_page_properties modify kind query except list queries: indeed, central limitation list queries choose properties return pages meet given criterion. concept generator complex. generator based property module, must combined query_by_ function produce valid query. generator based list module, combined query_by_ query.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"wikkitidy provides ergonomic API Action API's Query modules. modules useful researchers, allow explore stucture Wikipedia back pages. can obtain list available modules R console using list_all_property_modules(), list_all_list_modules() list_all_generators(),","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Wikipedia using the MediaWiki Action API — wiki_action_request","text":"","code":"# List the first 10 pages in the category 'Australian historians' historians <- wiki_action_request() %>%   query_list_pages(     \"categorymembers\",     cmtitle = \"Category:Australian_historians\",     cmlimit = 10   ) %>%   next_batch() historians #> <complete/query_tbl> #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ✔ Data complete for all records #> # A tibble: 10 × 3 #>      pageid    ns title                     #>       <int> <int> <chr>                     #>  1 72000612     0 Michelle Arrow            #>  2 74445832     0 Alan Atkinson (historian) #>  3 46828642     0 Craig Benjamin            #>  4 53702558     0 Frank Murcott Bladen      #>  5 59403076     0 Frank Bongiorno           #>  6 31593145     0 R. J. B. Bosworth         #>  7 23093698     0 Tim Bowden                #>  8 22906640     0 Phillip Bradley           #>  9 33224431     0 Richard Broome            #> 10 68287945     0 David Brophy (historian)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikimedia_rest_apis.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","title":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","text":"wikimedia_org_rest_request() builds request wikimedia.org REST API, provides statistical data Wikimedia Foundation projects xtools_rest_request() builds request XTools API, provides additional statistical data Wikimedia foundation projects","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikimedia_rest_apis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","text":"","code":"wikimedia_org_rest_request(endpoint, ..., language = \"en\")  xtools_rest_request(endpoint, ..., language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikimedia_rest_apis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","text":"endpoint endpoint specific kind request; wikimedia apis, comprises path components general API endpoint component specifying project query ... <dynamic-dots> Components add URL. Unnamed arguments added path request, named arguments added query parameters. language Two-letter language code desired Wikipedia edition.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikimedia_rest_apis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","text":"wikimedia_org/rest xtools/rest object, S3 vector subclasses httr2::request.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikimedia_rest_apis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a REST request to one of the Wikimedia Foundation's central APIs — wikimedia_rest_apis","text":"","code":"# Build request for articleinfo about Kate Bush's page on English Wikipedia request <- xtools_rest_request(\"page/articleinfo\", \"Kate_Bush\")  # Build request for most-viewed pages on German Wikipedia in July 2020 request <- wikimedia_org_rest_request(     \"metrics/pageviews/top\",     \"all-access\", \"2020\", \"07\", \"all-days\",     language = \"de\"     )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikipedia_rest_apis.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","title":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","text":"core_request_request() builds request MediaWiki Core REST API, basic REST API available MediaWiki wikis. wikimedia_rest_request() builds request Wikimedia REST API, additional api just Wikipedia wikis managed Wikimedia Foundation","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikipedia_rest_apis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","text":"","code":"core_rest_request(..., language = \"en\")  wikimedia_rest_request(..., language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikipedia_rest_apis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","text":"... <dynamic-dots> Components add URL. Unnamed arguments added path request, named arguments added query parameters. language two-letter language code Wikipedia edition","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikipedia_rest_apis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","text":"core/rest, wikimedia/rest, object, S3 vector subclasses httr2_request (see httr2::request). request needs passed httr2::req_perform retrieve data API.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikipedia_rest_apis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a REST request to one of Wikipedia's specific REST APIs — wikipedia_rest_apis","text":"","code":"# Get the html of the 'Earth' article on English Wikipedia response <- core_rest_request(\"page\", \"Earth\", \"html\") %>%   httr2::req_perform()  response <- wikimedia_rest_request(\"page\", \"html\", \"Earth\") %>%   httr2::req_perform()  # Some REST requests take query parameters. Pass these as named arguments. # To search German Wikipedia for articles about Goethe response <- core_rest_request(\"search/page\", q = \"Goethe\", limit = 2, language = \"de\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wikkitidy: Tidy Analysis of Wikipedia — wikkitidy-package","title":"wikkitidy: Tidy Analysis of Wikipedia — wikkitidy-package","text":"Access 'Wikipedia' several 'MediaWiki' APIs (https://www.mediawiki.org/wiki/API), well 'XTools' API (https://www.mediawiki.org/wiki/XTools/API). Ensure API calls correct, receive results tidy tibbles.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"wikkitidy: Tidy Analysis of Wikipedia — wikkitidy-package","text":"Maintainer: Michael Falk michaelgfalk@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to wikkitidy example — wikkitidy_example","title":"Get path to wikkitidy example — wikkitidy_example","text":"wikkitidy comes bundled number sample files inst/extdata directory. function make easy access","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example(file = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to wikkitidy example — wikkitidy_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to wikkitidy example — wikkitidy_example","text":"character vector, containing either path chosen file, nicknames available example files.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example() #> [1] \"akan_wiki\" wikkitidy_example(\"akan_wiki\") #> [1] \"/home/runner/work/_temp/Library/wikkitidy/extdata/akwiki-20230301-pages-articles-multistream-index.txt.bz2\""},{"path":"https://wikihistories.github.io/wikkitidy/reference/xtools_page.html","id":null,"dir":"Reference","previous_headings":"","what":"Access page-level statistics from the XTools Page API endpoint — xtools_page","title":"Access page-level statistics from the XTools Page API endpoint — xtools_page","text":"get_xtools_page_info() returns basic statistics articles' history quality, including total edits, creation date, assessment value (good, featured etc.) get_xtools_page_prose() returns statistics word counts referencing articles get_xtools_page_links() returns number ingoing outgoing links articles, including redirects get_xtools_page_top_editors() returns list top editors articles, optional filters date range non-bot status get_xtools_page_assessment() returns detailed statistics articles' assessment status Wikiproject importance levels","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/xtools_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access page-level statistics from the XTools Page API endpoint — xtools_page","text":"","code":"get_xtools_page_info(   title,   language = \"en\",   failure_mode = c(\"error\", \"quiet\") )  get_xtools_page_prose(   title,   language = \"en\",   failure_mode = c(\"error\", \"quiet\") )  get_xtools_page_links(   title,   language = \"en\",   failure_mode = c(\"error\", \"quiet\") )  get_xtools_page_top_editors(   title,   start = NULL,   end = NULL,   limit = 1000,   nobots = FALSE,   language = \"en\",   failure_mode = c(\"error\", \"quiet\") )  get_xtools_page_assessment(   title,   classonly = FALSE,   language = \"en\",   failure_mode = c(\"error\", \"quiet\") )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/xtools_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access page-level statistics from the XTools Page API endpoint — xtools_page","text":"title Character vector page titles language Language code version Wikipedia query failure_mode data found. See get_rest_resource() start character vector date object (optional): start date calculating top editors end character vector date object (optional): end date calculating top editors limit integer: maximum number top editors return nobots TRUE FALSE: TRUE, bots excluded top editor calculation classonly TRUE FALSE: TRUE, return article's assessment status, without Wikiproject information","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/xtools_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access page-level statistics from the XTools Page API endpoint — xtools_page","text":"list tbl results, length title. NB: results get_xtools_page_assessment still parsed properly.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/xtools_page.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access page-level statistics from the XTools Page API endpoint — xtools_page","text":"","code":"# Get basic statistics about Erich Auerbach on German Wikipedia auerbach <- get_xtools_page_info(\"Erich Auerbach\", language = \"de\") auerbach #> # A tibble: 1 × 17 #>   project   page  watchers pageviews pageviews_offset revisions editors ip_edits #>   <chr>     <chr>    <int>     <int>            <int>     <int>   <int>    <int> #> 1 de.wikip… Eric…        0       584               30       432     140       42 #> # ℹ 9 more variables: minor_edits <int>, author <chr>, author_editcount <lgl>, #> #   created_at <chr>, created_rev_id <int>, modified_at <chr>, #> #   secs_since_last_edit <int>, last_edit_id <int>, elapsed_time <dbl>"},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-development-version","dir":"Changelog","previous_headings":"","what":"wikkitidy (development version)","title":"wikkitidy (development version)","text":"tidyr moved Imports Suggests Automatic unnesting, introduced 0.1.8, removed. causing bugs certain edge cases, nested data frames duplicated columns enclosing data frame. Unnesting now left user, shown examples.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-0111","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.11","title":"wikkitidy 0.1.11","text":"CRAN release: 2023-10-20 Live API calls removed test suite CRAN; still tested package’s CI pipeline. Fixed failing test due Wikimedia server error","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-0110","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.10","title":"wikkitidy 0.1.10","text":"CRAN release: 2023-10-06 First release Documentation errors removed","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-019","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.9","title":"wikkitidy 0.1.9","text":"Release candidate Updated documentation","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-018","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.8","title":"wikkitidy 0.1.8","text":"Fixed perform_query() bug , deal results return nothing given query given pages Fewer queries return nested data frames now","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-017","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.7","title":"wikkitidy 0.1.7","text":"Fixed bug perform_query() fail single property requested API:Properties module (.e. using new_prop_query() query_page_properties())","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-016","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.6","title":"wikkitidy 0.1.6","text":"“endpoint” parameter get_rest_resource() renamed “api” New xtools_page() functions, allowing programmatic access statistics pages’ edit histories, links quality markers get_rest_resource() now supports ‘quiet’ failure mode, 4xx 5xx errors quietly return data. Currently implemented xtools_page() functions","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-015","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.5","title":"wikkitidy 0.1.5","text":"functions perform queries Action API rewritten. now family three functions: next_result(), next_batch() retrieve_all(). Improvements formatting results. Raw list columns replaced lists tibbles, enable easy navigation results using tidyr::unnest().","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-014","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.4","title":"wikkitidy 0.1.4","text":"build_category_tree(): recur category system build graph subcategories pages","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-013","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.3","title":"wikkitidy 0.1.3","text":"query_category_members(): first set new helper functions provide user-friendly access Action API. query_list_of renamed query_list_pages() New functions query_by_title, query_by_pageid() query_by_revid() build new kinds Action API queries New type system Action API: see constructors new_prop_query(), new_generator_query() new_list_query()","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-012","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.2","title":"wikkitidy 0.1.2","text":"get_history_count(): find many times page edited Improved handling get_diff() response data Improved handling page_vector_functions() response data. functions now return tbl list tbls Basic support wikimedia_rest_apis() ‘perform_query_once()’ renamed next_batch()","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-011","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.1","title":"wikkitidy 0.1.1","text":"Better parsing response values. functions now return simple vector, tbl_df, list tbl_dfs, exception Action API Query modules, whose response object renamed query_tbl() clarity","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-010","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.0","title":"wikkitidy 0.1.0","text":"Underlying interface three main APIs: core_rest_request(), wiki_action_request() wikimedia_rest_request() First vector functions getting page-level data First helper functions build complex Action API requests First data types response values Added NEWS.md file track changes package. New low-level helper, get_rest_resource(), generating REST API calls; refactored existing calls use function REST requests now accept query parameters New family page_vector_functions retrieve data vector page titles, e.g. get_latest_revision()","code":""}]
