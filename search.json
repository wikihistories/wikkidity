[{"path":"https://wikihistories.github.io/wikkitidy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 wikkitidy authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Falk. Author, maintainer.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Falk M (2023). wikkitidy: Tidy analysis Wikipedia R. R package version 0.1.1.9001, https://wikihistories.github.io/wikkitidy/.","code":"@Manual{,   title = {wikkitidy: Tidy analysis of Wikipedia in R},   author = {Michael Falk},   year = {2023},   note = {R package version 0.1.1.9001},   url = {https://wikihistories.github.io/wikkitidy/}, }"},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"wikkitidy-","dir":"","previous_headings":"","what":"Tidy analysis of Wikipedia in R ","title":"Tidy analysis of Wikipedia in R ","text":"Tidy analysis Wikipedia R","code":""},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"whats-in-a-name","dir":"","previous_headings":"","what":"What’s in a name?","title":"Tidy analysis of Wikipedia in R ","text":"wiki: many wikis, one dominates Wikiverse. Wikipedia largest repository facts ever assembled human hands. Scholars world turning Wikipedia understand twenty-first century society understands . quiddity: ‘whatness’ thing. kind thing . Wikipedia? merely another encyclopaedia? news presented history? consensus global village, battleground ideological war? tidy: best kind data. R programmers lucky access tidyverse, collection packages make easy analyse, visualise publish data. package embodies tidy data principles returning results Wikipedia’s APIs tibbles simple vectors, providing number vectorised analysis functions can applied reliably without fuss data retrieve. Thus wikkitidy’s aim: help work Wikipedia minimal data wrangling cleaning.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy analysis of Wikipedia in R ","text":"can install development version wikkitidy GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"wikihistories/wikkitidy\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner loop of retrieve_all — continue_query","title":"Inner loop of retrieve_all — continue_query","text":"function drives retrieve_all, repeatedly appending continue parameters returned MediaWiki Action API request retrieving next batch.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner loop of retrieve_all — continue_query","text":"","code":"continue_query(.req, data = NULL, continue = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner loop of retrieve_all — continue_query","text":".req httr2_request object describing API query data Data returned previous iteration query, continue Continue parameter returned previous iteration query, ","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/continue_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner loop of retrieve_all — continue_query","text":"query_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a REST request — core_rest_request","title":"Build a REST request — core_rest_request","text":"core_request_request() builds request MediaWiki Core REST API, basic REST API available MediaWiki wikis. wikimedia_rest_request() builds request Wikimedia REST API, additional endpoint just Wikipedia wikis managed Wikimedia Foundation","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a REST request — core_rest_request","text":"","code":"core_rest_request(..., language = \"en\")  wikimedia_rest_request(..., language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a REST request — core_rest_request","text":"... <dynamic-dots> Components add URL. Unnamed arguments added path request, named arguments added query parameters. language two-letter language code Wikipedia edition","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a REST request — core_rest_request","text":"core/rest wikimedia/rest object, S3 vector subclasses httr2_request (see httr2::request). request needs passed httr2::req_perform retrieve data API.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a REST request — core_rest_request","text":"Low-level functions accessing Wikipedia's REST APIs. minimal error-checking, primarily developer use.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/core_rest_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a REST request — core_rest_request","text":"","code":"# Get the html of the 'Earth' article on English Wikipedia response <- core_rest_request(\"page\", \"Earth\", \"html\") %>%   httr2::req_perform()  response <- wikimedia_rest_request(\"page\", \"html\", \"Earth\") %>%   httr2::req_perform()  # Some REST requests take query parameters. Pass these as named arguments. # To search German Wikipedia for articles about Goethe response <- core_rest_request(\"search/page\", q=\"Goethe\", limit=2, language=\"de\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"two revisions Wikipedia page can compared using 'diff' tool. tool compares '' revision '' revision, looking insertions, deletions relocations text. operation can performed order, across span revisions.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"get_diff(from, to, language = \"en\", simplify = T)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"Vector revision ids Vector revision ids language Vector two-letter language codes (recycled length==1) simplify logical: R simplify result (see return)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"return value depends simplify parameter. simplify == TRUE: Either list tibble::tbl_df objects length , single tibble::tbl_df length 1. response data stripped away, leaving just textual differences revisions, location, type 'highlightRanges' textual differences complicated. simplify == FALSE: list length containing full wikidiff2 response pair revisions. response includes additional data displaying diffs onscreen.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search for insertions, deletions or relocations of text between two versions\nof a Wikipedia page — get_diff","text":"","code":"# Compare revision 847170467 to 851733941 on English Wikipedia get_diff(847170467, 851733941) #> # A tibble: 2 × 5 #>    type lineNumber text                                    offset_from offset_to #>   <int>      <int> <chr>                                         <int>     <int> #> 1     1         97 \"\"                                               NA     15633 #> 2     1         98 \"In 2016, a new species of [[Cecidomyi…          NA     15634  # The function is vectorised, so you can compare multiple pairs of revisions # in a single call # See diffs for the last five revisions of the Main Page revisions <- wiki_action_request() %>%   query_page_properties(     \"revisions\",     titles = \"Main_Page\", rvlimit = 5, rvprop = \"ids\", rvdir = \"older\"   ) %>%   perform_query_once() %>%   tidyr::hoist(revisions, \"parentid\", \"revid\") %>%   dplyr::mutate(diffs = get_diff(from = parentid, to = revid)) revisions #> # A tibble: 5 × 6 #>     pageid    ns title       parentid      revid diffs            #>      <int> <int> <chr>          <int>      <int> <list>           #> 1 15580374     0 Main Page 1114117152 1114291180 <tibble [2 × 6]> #> 2 15580374     0 Main Page 1108085777 1114117152 <tibble [2 × 6]> #> 3 15580374     0 Main Page 1106811004 1108085777 <tibble [2 × 6]> #> 4 15580374     0 Main Page 1106810840 1106811004 <tibble [1 × 6]> #> 5 15580374     0 Main Page 1093586708 1106810840 <tibble [1 × 6]>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count how many times Wikipedia articles have been edited — get_history_count","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"Count many times Wikipedia articles edited","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"","code":"get_history_count(   title,   type = c(\"edits\", \"anonymous\", \"bot\", \"editors\", \"minor\", \"reverted\"),   from = NULL,   to = NULL,   language = \"en\" )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"title vector article titles type type edit count Optional: vector revision ids Optional: vector revision ids language Vector two-letter language codes Wikipedia editions","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"tibble::tbl_df two columns: 'count' : number edits given type 'limit' : whether 'count' exceeds API's limit. type edit different limit. 'count' exceeds limit, limit returned count 'limit' set TRUE","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_history_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count how many times Wikipedia articles have been edited — get_history_count","text":"","code":"# Get the number of edits made by auto-confirmed editors to a page between # revisions 384955912 and 406217369 get_history_count(\"Jupiter\", \"editors\", 384955912, 406217369) #> # A tibble: 1 × 2 #>   count limit #>   <int> <lgl> #> 1    65 FALSE  # Compare which authors have the most edit activity authors <- tibble::tribble(   ~author,   \"Jane Austen\",   \"William Shakespeare\",   \"Emily Dickinson\" ) %>%   dplyr::mutate(get_history_count(author)) authors #> # A tibble: 3 × 3 #>   author              count limit #>   <chr>               <int> <lgl> #> 1 Jane Austen          5871 FALSE #> 2 William Shakespeare 13346 FALSE #> 3 Emily Dickinson      5393 FALSE"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out more about a page or vector of pages — get_page_properties","title":"Find out more about a page or vector of pages — get_page_properties","text":"function make one API call per page. Beware requesting data many pages!","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out more about a page or vector of pages — get_page_properties","text":"","code":"get_page_properties(.x, by = c(\"pageid\", \"title\", \"revid\"), properties, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out more about a page or vector of pages — get_page_properties","text":".x vector pageids, titles revisionids type information contained .x properties desired properties; can either string delimited \"|\" character vector ... Name-value pairs additional parameters particular properties requested","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out more about a page or vector of pages — get_page_properties","text":"list length .x, containing returned properties.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_page_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out more about a page or vector of pages — get_page_properties","text":"","code":"# List all members of a category, then retrieve page information page_ids <- wiki_action_request() %>% query_list_of(\"categorymembers\", cmtitle=\"Category:ATP_Cup\") %>%   retrieve_all() page_info <- get_page_properties(page_ids$pageid, by=\"pageid\", \"info\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":null,"dir":"Reference","previous_headings":"","what":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"function intended developer use. makes easy quickly generate vectorised calls different API endpoints.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"","code":"get_rest_resource(   ...,   language = \"en\",   endpoint = c(\"core\", \"wikimedia\"),   response_format = c(\"json\", \"html\"),   response_type = NULL )"},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"... <dynamic-dots> URL components query parameters desired resources. Names arguments ignored. function follows tidyverse vector recycling rules, vectors must length length one. Unnamed arguments appended URL path; named arguments added query parameters language Character vector two-letter language codes endpoint desired REST endpoint, either \"core\" \"wikimedia\" response_format expected Content-Type response. Currently \"html\" \"json\" supported. response_type schema response. supplied, results parsed using schema.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/get_rest_resource.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get resources from one of Wikipedia's two REST APIs — get_rest_resource","text":"list responses. response_format == \"json\", responses simple R lists. response_format == \"html\", responses xml_document objects. response_type supplied, response coerced tibble::tbl_df vector using relevant schema. response 'scalar list' (.e. list length == 1), silently unlisted, returning simple list vector.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data about pages from their titles — page_vector_functions","title":"Get data about pages from their titles — page_vector_functions","text":"get_latest_revision() returns metadata latest revision page. get_page_html() returns rendered html page. get_page_summary() returns metadata latest revision, along page description summary extracted opening paragraph get_page_related() returns summaries 20 related pages passed page get_page_talk() returns structured talk page content title. must ensure use title Talk page , e.g. \"Talk:Earth\" rather \"Earth\" get_page_langlinks() returns interwiki links title","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data about pages from their titles — page_vector_functions","text":"","code":"get_latest_revision(title, language = \"en\")  get_page_html(title, language = \"en\")  get_page_summary(title, language = \"en\")  get_page_related(title, language = \"en\")  get_page_talk(title, language = \"en\")  get_page_langlinks(title, language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data about pages from their titles — page_vector_functions","text":"title character vector page titles. language character vector two-letter language codes, either length 1 length title","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data about pages from their titles — page_vector_functions","text":"list, vector tibble, length title, desired data.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/page_vector_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data about pages from their titles — page_vector_functions","text":"","code":"# Get language links for a known page on English Wikipedia get_page_langlinks(\"Charles Harpur\") #> # A tibble: 2 × 4 #>   code  name     key            title          #>   <chr> <chr>    <chr>          <chr>          #> 1 de    Deutsch  Charles_Harpur Charles Harpur #> 2 fr    français Charles_Harpur Charles Harpur  # Many of these functions return a list of data frames. Tidyr can be useful. # Get 20 related pages for German City cities <- tibble::tribble(   ~city,   \"Berlin\",   \"Darmstadt\",   \"Leipzig\" ) %>%   dplyr::mutate(related = get_page_related(city)) cities #> # A tibble: 3 × 2 #>   city      related            #>   <chr>     <list>             #> 1 Berlin    <tibble [20 × 32]> #> 2 Darmstadt <tibble [20 × 32]> #> 3 Leipzig   <tibble [20 × 30]>  # Use [tidyr::unnest] to get one row per related page: tidyr::unnest(cities, \"related\") #> # A tibble: 60 × 33 #>    city  pageid    ns index type  title displaytitle namespace_id namespace_text #>    <chr>  <int> <int> <int> <chr> <chr> <chr>               <int> <chr>          #>  1 Berl… 3.76e3     0    10 stan… Bran… \"<span clas…            0 \"\"             #>  2 Berl… 4.91e4     0     9 stan… Pots… \"<span clas…            0 \"\"             #>  3 Berl… 1.57e5     0     7 stan… Bran… \"<span clas…            0 \"\"             #>  4 Berl… 2.72e5     0     3 stan… Berl… \"<span clas…            0 \"\"             #>  5 Berl… 4.33e5     0     8 stan… Berl… \"<span clas…            0 \"\"             #>  6 Berl… 1.14e6     0    11 stan… Hert… \"<span clas…            0 \"\"             #>  7 Berl… 5.04e6     0    13 stan… Babe… \"<span clas…            0 \"\"             #>  8 Berl… 5.59e6     0     6 stan… Econ… \"<span clas…            0 \"\"             #>  9 Berl… 9.21e6     0    15 stan… Frie… \"<span clas…            0 \"\"             #> 10 Berl… 2.41e7     0     1 stan… Demo… \"<span clas…            0 \"\"             #> # ℹ 50 more rows #> # ℹ 24 more variables: wikibase_item <chr>, titles_canonical <chr>, #> #   titles_normalized <chr>, titles_display <chr>, thumbnail_source <list>, #> #   thumbnail_width <list>, thumbnail_height <list>, #> #   originalimage_source <list>, originalimage_width <list>, #> #   originalimage_height <list>, lang <chr>, dir <chr>, revision <chr>, #> #   tid <chr>, timestamp <chr>, description <list>, …  # The functions are vectorised over title and language # Find all articles about Joanna Baillie, and retrieve their summary # data. baillie <- get_page_langlinks(\"Joanna Baillie\") %>%   dplyr::mutate(get_page_summary(title = title, language = code)) #>  ■■■■■■■■■■■■■■■■■■■■              62% |  ETA:  1s baillie #> # A tibble: 16 × 30 #>    code  name       key     title type  displaytitle namespace_id namespace_text #>    <chr> <chr>      <chr>   <chr> <chr> <chr>               <int> <chr>          #>  1 ar    العربية    جوانا_… جوان… stan… \"<span clas…            0 \"\"             #>  2 arz   مصرى       جوانا_… جوان… stan… \"<span clas…            0 \"\"             #>  3 avk   Kotava     Johann… Joha… stan… \"<span clas…            0 \"\"             #>  4 bg    български  Джоана… Джоа… stan… \"<span clas…            0 \"\"             #>  5 bn    বাংলা      জনা_বে… জনা … stan… \"<span clas…            0 \"\"             #>  6 ca    català     Johann… Joha… stan… \"<span clas…            0 \"\"             #>  7 de    Deutsch    Joanna… Joan… stan… \"<span clas…            0 \"\"             #>  8 es    español    Joanna… Joan… stan… \"<span clas…            0 \"\"             #>  9 eu    euskara    Joanna… Joan… stan… \"<span clas…            0 \"\"             #> 10 fr    français   Johann… Joha… stan… \"<span clas…            0 \"\"             #> 11 he    עברית      ג'ואנה… ג'וא… stan… \"<span clas…            0 \"\"             #> 12 it    italiano   Joanna… Joan… stan… \"<span clas…            0 \"\"             #> 13 pt    português  Joanna… Joan… stan… \"<span clas…            0 \"\"             #> 14 ru    русский    Бейли,… Бейл… stan… \"<span clas…            0 \"\"             #> 15 sv    svenska    Joanna… Joan… stan… \"<span clas…            0 \"\"             #> 16 vi    Tiếng Việt Joanna… Joan… stan… \"<span clas…            0 \"\"             #> # ℹ 22 more variables: wikibase_item <chr>, titles_canonical <chr>, #> #   titles_normalized <chr>, titles_display <chr>, pageid <int>, #> #   thumbnail_source <chr>, thumbnail_width <int>, thumbnail_height <int>, #> #   originalimage_source <chr>, originalimage_width <int>, #> #   originalimage_height <int>, lang <chr>, dir <chr>, revision <chr>, #> #   tid <chr>, timestamp <chr>, description <list>, description_source <list>, #> #   content_urls_desktop <list>, content_urls_mobile <list>, extract <chr>, …"},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"Wikipedia's APIs provide data using range different json schemas. generic function converts data convenient formats use R data frame.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"","code":"# S3 method for wikidiff2 parse_response(response)  parse_response(response)  # S3 method for default parse_response(response)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"response data retrieved Wikipedia.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"vector length response. Generally, simple vector, tibble::tbl_df list tibble::tbl_df objects.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/parse_response.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Convert a response from a Wikipedia API into a convenient format — parse_response.wikidiff2","text":"parse_response(wikidiff2): Simplify wikidiff2 response dataframe textual differences, discarding display data parse_response(default): default, create list nested tbl_dfs","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":null,"dir":"Reference","previous_headings":"","what":"Get first batch of results for a MediaWiki Action API request — perform_query_once","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"Get first batch results MediaWiki Action API request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"","code":"perform_query_once(.req)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":".req httr2_request object describing API query","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"query_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/perform_query_once.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get first batch of results for a MediaWiki Action API request — perform_query_once","text":"","code":"# List the first batch of categories that Albert Einstein belongs to response <- wiki_action_request(   prop = \"categories\",   titles = \"Albert Einstein\"   ) %>%   perform_query_once()"},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"Add required prefix URL parameters MediaWiki Action API request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"","code":"prefix_params(params, prefix)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"params character vector prefix character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/prefix_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add required prefix to URL parameters for MediaWiki Action API request — prefix_params","text":"character vector","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify which pages to generate from the Action API — query_generate_pages","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"See API:Lists available generators. list actions MediaWiki API can also used generators. use list action generator, receive data pages attribute response body, rather name generator. can query_generate_pages query_page_properties choose properties page return.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"","code":"query_generate_pages(.req, generator, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify which pages to generate from the Action API — query_generate_pages","text":".req httr2_request, e.g. generated wiki_action_request generator type generator return ... Additional parameters generator","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"set additional parameters generator, prepend parameter \"g\". instance, set limit 10 number pages returned categorymembers generator, set parameter gcmlimit = 10.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_generate_pages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify which pages to generate from the Action API — query_generate_pages","text":"","code":"# Search for articles about seagulls  resp <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch=\"seagull\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$pages #> [[1]] #> [[1]]$pageid #> [1] 45232 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Jonathan Livingston Seagull\" #>  #> [[1]]$index #> [1] 4 #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 210481 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Gull\" #>  #> [[2]]$index #> [1] 2 #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 210492 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Seagull (disambiguation)\" #>  #> [[3]]$index #> [1] 6 #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 474370 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"The Seagull\" #>  #> [[4]]$index #> [1] 3 #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 887152 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Barbara Hershey\" #>  #> [[5]]$index #> [1] 8 #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 4637606 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Seagull Book\" #>  #> [[6]]$index #> [1] 9 #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 6386157 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Seagull management\" #>  #> [[7]]$index #> [1] 7 #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 22496419 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"HMS Seagull\" #>  #> [[8]]$index #> [1] 10 #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 58723600 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Bobby Seagull\" #>  #> [[9]]$index #> [1] 1 #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 73546753 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"BYD Seagull\" #>  #> [[10]]$index #> [1] 5 #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify which pages to list from the action API — query_list_of","title":"Specify which pages to list from the action API — query_list_of","text":"See API:Lists available list actions. list action returns list pages, typically including pageid, namespace title. Individual lists particular properties can requested, usually prefaced two-word code based name list (e.g. specific properties categorymembers list action prefixed cm).","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify which pages to list from the action API — query_list_of","text":"","code":"query_list_of(.req, list, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify which pages to list from the action API — query_list_of","text":".req httr2_request, e.g. generated wiki_action_request list type list return ... Additional parameters query, e.g. set configure list","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify which pages to list from the action API — query_list_of","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify which pages to list from the action API — query_list_of","text":"request performed, data returned body request query object, labeled chosen list action. want study actual pages listed, advisable retrieve pages directly using generator, rather listing IDs using list action. using list action, second request required get information page. Using generator, can query pages retrieve relevant properties single API call.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_list_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify which pages to list from the action API — query_list_of","text":"","code":"# Get the ten most recently added pages in Category:Physics  resp <- wiki_action_request() %>%   query_list_of(\"categorymembers\", cmsort = \"timestamp\",     cmdir = \"desc\", cmtitle = \"Category:Physics\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$categorymembers #> [[1]] #> [[1]]$pageid #> [1] 73275338 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Coincidence Method (particle physics)\" #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 570922 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Action at a distance\" #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 1854369 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Hydraulic head\" #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 36477012 #>  #> [[4]]$ns #> [1] 14 #>  #> [[4]]$title #> [1] \"Category:Concepts in physics\" #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 70983414 #>  #> [[5]]$ns #> [1] 14 #>  #> [[5]]$title #> [1] \"Category:Physics by country\" #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 71976587 #>  #> [[6]]$ns #> [1] 14 #>  #> [[6]]$title #> [1] \"Category:Physics events\" #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 23479 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Physicalism\" #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 10844347 #>  #> [[8]]$ns #> [1] 14 #>  #> [[8]]$title #> [1] \"Category:Physical systems\" #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 1310583 #>  #> [[9]]$ns #> [1] 14 #>  #> [[9]]$title #> [1] \"Category:History of physics\" #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 63332556 #>  #> [[10]]$ns #> [1] 14 #>  #> [[10]]$title #> [1] \"Category:Works about physics\" #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose properties to return for pages from the action API — query_page_properties","title":"Choose properties to return for pages from the action API — query_page_properties","text":"See API:Properties list available properties. Many additional parameters control behavior, can passed function named arguments.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"query_page_properties(.req, properties, ...)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose properties to return for pages from the action API — query_page_properties","text":".req httr2_request, e.g. generated wiki_action_request properties properties request, either character vector string properties separated \"|\" ... Additional parameters pass, e.g. modify returned property request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose properties to return for pages from the action API — query_page_properties","text":"HTTP response: S3 list class httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose properties to return for pages from the action API — query_page_properties","text":"query_page_properties can used combination query_generate_pages choose information retrieve generated pages. already list page ids titles, can build query using query_page_properties collect information .","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_page_properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose properties to return for pages from the action API — query_page_properties","text":"","code":"# Search for articles about seagulls and return their links to other # language wikis  resp <- wiki_action_request() %>%   query_generate_pages(\"search\", gsrsearch=\"seagull\") %>%   query_page_properties(\"langlinks\") %>%   httr2::req_perform() %>%   httr2::resp_body_json()  resp$query$pages #> [[1]] #> [[1]]$pageid #> [1] 45232 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Jonathan Livingston Seagull\" #>  #> [[1]]$index #> [1] 4 #>  #> [[1]]$langlinks #> [[1]]$langlinks[[1]] #> [[1]]$langlinks[[1]]$lang #> [1] \"ast\" #>  #> [[1]]$langlinks[[1]]$title #> [1] \"Juan Salvador Gaviota\" #>  #>  #> [[1]]$langlinks[[2]] #> [[1]]$langlinks[[2]]$lang #> [1] \"bg\" #>  #> [[1]]$langlinks[[2]]$title #> [1] \"Джонатан Ливингстън Чайката\" #>  #>  #> [[1]]$langlinks[[3]] #> [[1]]$langlinks[[3]]$lang #> [1] \"cs\" #>  #> [[1]]$langlinks[[3]]$title #> [1] \"Jonathan Livingston Racek\" #>  #>  #> [[1]]$langlinks[[4]] #> [[1]]$langlinks[[4]]$lang #> [1] \"de\" #>  #> [[1]]$langlinks[[4]]$title #> [1] \"Die Möwe Jonathan\" #>  #>  #> [[1]]$langlinks[[5]] #> [[1]]$langlinks[[5]]$lang #> [1] \"el\" #>  #> [[1]]$langlinks[[5]]$title #> [1] \"Ο γλάρος Ιωνάθαν Λίβινγκστον\" #>  #>  #> [[1]]$langlinks[[6]] #> [[1]]$langlinks[[6]]$lang #> [1] \"es\" #>  #> [[1]]$langlinks[[6]]$title #> [1] \"Juan Salvador Gaviota\" #>  #>  #> [[1]]$langlinks[[7]] #> [[1]]$langlinks[[7]]$lang #> [1] \"eu\" #>  #> [[1]]$langlinks[[7]]$title #> [1] \"Jonatan Kaioa\" #>  #>  #> [[1]]$langlinks[[8]] #> [[1]]$langlinks[[8]]$lang #> [1] \"fa\" #>  #> [[1]]$langlinks[[8]]$title #> [1] \"جاناتان مرغ دریایی\" #>  #>  #> [[1]]$langlinks[[9]] #> [[1]]$langlinks[[9]]$lang #> [1] \"fi\" #>  #> [[1]]$langlinks[[9]]$title #> [1] \"Lokki Joonatan\" #>  #>  #> [[1]]$langlinks[[10]] #> [[1]]$langlinks[[10]]$lang #> [1] \"fr\" #>  #> [[1]]$langlinks[[10]]$title #> [1] \"Jonathan Livingston le goéland\" #>  #>  #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 210481 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Gull\" #>  #> [[2]]$index #> [1] 3 #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 210492 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Seagull (disambiguation)\" #>  #> [[3]]$index #> [1] 6 #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 474370 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"The Seagull\" #>  #> [[4]]$index #> [1] 2 #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 887152 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Barbara Hershey\" #>  #> [[5]]$index #> [1] 8 #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 4637606 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Seagull Book\" #>  #> [[6]]$index #> [1] 10 #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 6386157 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Seagull management\" #>  #> [[7]]$index #> [1] 7 #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 22496419 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"HMS Seagull\" #>  #> [[8]]$index #> [1] 9 #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 58723600 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Bobby Seagull\" #>  #> [[9]]$index #> [1] 1 #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 73546753 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"BYD Seagull\" #>  #> [[10]]$index #> [1] 5 #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"Representation Wikipedia data returned Action API Query module tibble, request metadata stored attributes.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"","code":"query_tbl(x, request, continue, batchcomplete)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"x tibble request httr2_request object used generate tibble continue continue parameter returned API batchcomplete batchcomplete parameter returned API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/query_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Representation of Wikipedia data returned from an Action API Query module as tibble, with request\nmetadata stored as attributes. — query_tbl","text":"tibble: S3 data.frame class query_tbl.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"Typically request MediaWiki Action API return limited number results. maximum results vary query, typically set 500. results server, API return continue object allowing request batches data. function handles continue object retrieves data desired query.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"","code":"retrieve_all(x)  # S3 method for httr2_request retrieve_all(x)  # S3 method for query_tbl retrieve_all(x)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"x object describing desired request. Either query_tbl httr2_request","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"query_tbl: S3 dataframe subclass tibble::tibble","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"retrieve_all(httr2_request): Get available data constructed request retrieve_all(query_tbl): Complete query incomplete query_tbl","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/retrieve_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continue requesting data from the MediaWiki Action API until there is none\nleft — retrieve_all","text":"","code":"# Create a request object, then repeatedly retrieve all the pages # NB: the 'uclimit' parameter sets the number of pages retrieved by each # API call. jimbos_contributions <- wiki_action_request() %>%   query_list_of(\"usercontribs\", ucuser=\"Jimbo_Wales\", uclimit=500) %>%   retrieve_all() # To confirm, the resulting tibble has more than 500 rows nrow(jimbos_contributions) #> [1] 14193  # Alternatively, you can try out a request using perform_query_once(), and # if you are happy with the resulting data, retrieve the rest of the results # from the returned data frame preview <- wiki_action_request() %>%   query_page_properties(\"categories\", titles=\"Albert Einstein\") %>%   perform_query_once() print(preview) #> <query_tbl> #> Request URL: #> https://en.wikipedia.org/w/api.php?action=query&format=json&formatversion=2&prop=categories&titles=Albert%20Einstein #> ℹ There are more results on the server. Retrieve them with `next_batch()` or `retrieve_all()` #> ! Data not fully downloaded for last batch. Retrieve it with `next_batch()` or `retrieve_all()`. #> # A tibble: 10 × 4 #>    pageid    ns title           categories       #>     <int> <int> <chr>           <list>           #>  1    736     0 Albert Einstein <named list [2]> #>  2    736     0 Albert Einstein <named list [2]> #>  3    736     0 Albert Einstein <named list [2]> #>  4    736     0 Albert Einstein <named list [2]> #>  5    736     0 Albert Einstein <named list [2]> #>  6    736     0 Albert Einstein <named list [2]> #>  7    736     0 Albert Einstein <named list [2]> #>  8    736     0 Albert Einstein <named list [2]> #>  9    736     0 Albert Einstein <named list [2]> #> 10    736     0 Albert Einstein <named list [2]> all_results <- retrieve_all(preview)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"Wikimedia Foundation publishes MD5 checksums database dumps. function looks published sha1 checksums based file name, compares locally calcualte using openssl package.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"","code":"verify_xml_integrity(path)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"path path file","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"True (invisibly) successful, otherwise error","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/verify_xml_integrity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that a Wikimedia XML file has not been corrupted — verify_xml_integrity","text":"","code":"akan_wiki <- wikkitidy_example(\"akan_wiki\") verify_xml_integrity(akan_wiki)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate request for the MediaWiki Action API — wiki_action_request","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"Generate request MediaWiki Action API","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"","code":"wiki_action_request(..., action = \"query\", language = \"en\")"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"... Parameters request action action perform, typically 'query' language language edition Wikipedia request, e.g. 'en' 'fr'","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"wiki_action_request, S3 list subclasses httr2_request (see httr2::request)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wiki_action_request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate request for the MediaWiki Action API — wiki_action_request","text":"","code":"# List the first 10 pages in the category 'Australian historians'  request <- wiki_action_request(   list = \"categorymembers\",   cmtitle = \"Category:Australian_historians\",   cmlimit = 10 ) request %>%   httr2::req_perform() %>%   httr2::resp_body_json() %>%   .$query %>%   .$categorymembers #> [[1]] #> [[1]]$pageid #> [1] 72000612 #>  #> [[1]]$ns #> [1] 0 #>  #> [[1]]$title #> [1] \"Michelle Arrow\" #>  #>  #> [[2]] #> [[2]]$pageid #> [1] 46828642 #>  #> [[2]]$ns #> [1] 0 #>  #> [[2]]$title #> [1] \"Craig Benjamin\" #>  #>  #> [[3]] #> [[3]]$pageid #> [1] 59403076 #>  #> [[3]]$ns #> [1] 0 #>  #> [[3]]$title #> [1] \"Frank Bongiorno\" #>  #>  #> [[4]] #> [[4]]$pageid #> [1] 31593145 #>  #> [[4]]$ns #> [1] 0 #>  #> [[4]]$title #> [1] \"R. J. B. Bosworth\" #>  #>  #> [[5]] #> [[5]]$pageid #> [1] 23093698 #>  #> [[5]]$ns #> [1] 0 #>  #> [[5]]$title #> [1] \"Tim Bowden\" #>  #>  #> [[6]] #> [[6]]$pageid #> [1] 22906640 #>  #> [[6]]$ns #> [1] 0 #>  #> [[6]]$title #> [1] \"Phillip Bradley\" #>  #>  #> [[7]] #> [[7]]$pageid #> [1] 33224431 #>  #> [[7]]$ns #> [1] 0 #>  #> [[7]]$title #> [1] \"Richard Broome\" #>  #>  #> [[8]] #> [[8]]$pageid #> [1] 68287945 #>  #> [[8]]$ns #> [1] 0 #>  #> [[8]]$title #> [1] \"David Brophy (historian)\" #>  #>  #> [[9]] #> [[9]]$pageid #> [1] 8898515 #>  #> [[9]]$ns #> [1] 0 #>  #> [[9]]$title #> [1] \"Trevor R. Bryce\" #>  #>  #> [[10]] #> [[10]]$pageid #> [1] 19158257 #>  #> [[10]]$ns #> [1] 0 #>  #> [[10]]$title #> [1] \"Bill Bunbury\" #>  #>"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","title":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","text":"wrapper around Wikipedia's major APIs: MediaWiki Action API, REST API Wikmedia REST API. three APIs provide complementary functionality analysis Wikipedia social scientists digital humanists. package provides tidy interface three APIs, along range functions solve common tasks Wikipedia research.","code":""},{"path":[]},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"wikkitidy: Tidy analysis of Wikipedia in R — wikkitidy-package","text":"Maintainer: Michael Falk michaelgfalk@gmail.com (ORCID)","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to wikkitidy example — wikkitidy_example","title":"Get path to wikkitidy example — wikkitidy_example","text":"wikkitidy comes bundled number sample files inst/extdata directory. function make easy access","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example(file = NULL)"},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to wikkitidy example — wikkitidy_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https://wikihistories.github.io/wikkitidy/reference/wikkitidy_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to wikkitidy example — wikkitidy_example","text":"","code":"wikkitidy_example() #> [1] \"akan_wiki\" wikkitidy_example(\"akan_wiki\") #> [1] \"/home/runner/work/_temp/Library/wikkitidy/extdata/akwiki-20230301-pages-articles-multistream-index.txt.bz2\""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-development-version","dir":"Changelog","previous_headings":"","what":"wikkitidy (development version)","title":"wikkitidy (development version)","text":"get_history_count(): find many times page edited Improved handling get_diff() response data Improved handling page_vector_functions() response data. functions now return tbl list tbls","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-011","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.1","title":"wikkitidy 0.1.1","text":"Better parsing response values. functions now return simple vector, tbl_df, list tbl_dfs, exception Action API Query modules, whose response object renamed query_tbl() clarity","code":""},{"path":"https://wikihistories.github.io/wikkitidy/news/index.html","id":"wikkitidy-010","dir":"Changelog","previous_headings":"","what":"wikkitidy 0.1.0","title":"wikkitidy 0.1.0","text":"Underlying interface three main APIs: core_rest_request(), wiki_action_request() wikimedia_rest_request() First vector functions getting page-level data First helper functions build complex Action API requests First data types response values Added NEWS.md file track changes package. New low-level helper, get_rest_resource(), generating REST API calls; refactored existing calls use function REST requests now accept query parameters New family get_page functions retrieve data vector page titles, e.g. get_page_metadata()","code":""}]
